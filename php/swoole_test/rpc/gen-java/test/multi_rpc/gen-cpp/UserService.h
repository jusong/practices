/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UserService_H
#define UserService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "user_types.h"

namespace multi { namespace service {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class UserServiceIf {
 public:
  virtual ~UserServiceIf() {}
  virtual void storeUser(const User& user) = 0;
  virtual void retrieveUserById(User& _return, const int32_t uid) = 0;
};

class UserServiceIfFactory {
 public:
  typedef UserServiceIf Handler;

  virtual ~UserServiceIfFactory() {}

  virtual UserServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UserServiceIf* /* handler */) = 0;
};

class UserServiceIfSingletonFactory : virtual public UserServiceIfFactory {
 public:
  UserServiceIfSingletonFactory(const boost::shared_ptr<UserServiceIf>& iface) : iface_(iface) {}
  virtual ~UserServiceIfSingletonFactory() {}

  virtual UserServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(UserServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<UserServiceIf> iface_;
};

class UserServiceNull : virtual public UserServiceIf {
 public:
  virtual ~UserServiceNull() {}
  void storeUser(const User& /* user */) {
    return;
  }
  void retrieveUserById(User& /* _return */, const int32_t /* uid */) {
    return;
  }
};

typedef struct _UserService_storeUser_args__isset {
  _UserService_storeUser_args__isset() : user(false) {}
  bool user :1;
} _UserService_storeUser_args__isset;

class UserService_storeUser_args {
 public:

  UserService_storeUser_args(const UserService_storeUser_args&);
  UserService_storeUser_args& operator=(const UserService_storeUser_args&);
  UserService_storeUser_args() {
  }

  virtual ~UserService_storeUser_args() throw();
  User user;

  _UserService_storeUser_args__isset __isset;

  void __set_user(const User& val);

  bool operator == (const UserService_storeUser_args & rhs) const
  {
    if (!(user == rhs.user))
      return false;
    return true;
  }
  bool operator != (const UserService_storeUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_storeUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_storeUser_pargs {
 public:


  virtual ~UserService_storeUser_pargs() throw();
  const User* user;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_storeUser_result {
 public:

  UserService_storeUser_result(const UserService_storeUser_result&);
  UserService_storeUser_result& operator=(const UserService_storeUser_result&);
  UserService_storeUser_result() {
  }

  virtual ~UserService_storeUser_result() throw();

  bool operator == (const UserService_storeUser_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UserService_storeUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_storeUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_storeUser_presult {
 public:


  virtual ~UserService_storeUser_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserService_retrieveUserById_args__isset {
  _UserService_retrieveUserById_args__isset() : uid(false) {}
  bool uid :1;
} _UserService_retrieveUserById_args__isset;

class UserService_retrieveUserById_args {
 public:

  UserService_retrieveUserById_args(const UserService_retrieveUserById_args&);
  UserService_retrieveUserById_args& operator=(const UserService_retrieveUserById_args&);
  UserService_retrieveUserById_args() : uid(0) {
  }

  virtual ~UserService_retrieveUserById_args() throw();
  int32_t uid;

  _UserService_retrieveUserById_args__isset __isset;

  void __set_uid(const int32_t val);

  bool operator == (const UserService_retrieveUserById_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const UserService_retrieveUserById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_retrieveUserById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_retrieveUserById_pargs {
 public:


  virtual ~UserService_retrieveUserById_pargs() throw();
  const int32_t* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_retrieveUserById_result__isset {
  _UserService_retrieveUserById_result__isset() : success(false) {}
  bool success :1;
} _UserService_retrieveUserById_result__isset;

class UserService_retrieveUserById_result {
 public:

  UserService_retrieveUserById_result(const UserService_retrieveUserById_result&);
  UserService_retrieveUserById_result& operator=(const UserService_retrieveUserById_result&);
  UserService_retrieveUserById_result() {
  }

  virtual ~UserService_retrieveUserById_result() throw();
  User success;

  _UserService_retrieveUserById_result__isset __isset;

  void __set_success(const User& val);

  bool operator == (const UserService_retrieveUserById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserService_retrieveUserById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_retrieveUserById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_retrieveUserById_presult__isset {
  _UserService_retrieveUserById_presult__isset() : success(false) {}
  bool success :1;
} _UserService_retrieveUserById_presult__isset;

class UserService_retrieveUserById_presult {
 public:


  virtual ~UserService_retrieveUserById_presult() throw();
  User* success;

  _UserService_retrieveUserById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UserServiceClient : virtual public UserServiceIf {
 public:
  UserServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UserServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void storeUser(const User& user);
  void send_storeUser(const User& user);
  void recv_storeUser();
  void retrieveUserById(User& _return, const int32_t uid);
  void send_retrieveUserById(const int32_t uid);
  void recv_retrieveUserById(User& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UserServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<UserServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (UserServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_storeUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_retrieveUserById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UserServiceProcessor(boost::shared_ptr<UserServiceIf> iface) :
    iface_(iface) {
    processMap_["storeUser"] = &UserServiceProcessor::process_storeUser;
    processMap_["retrieveUserById"] = &UserServiceProcessor::process_retrieveUserById;
  }

  virtual ~UserServiceProcessor() {}
};

class UserServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UserServiceProcessorFactory(const ::boost::shared_ptr< UserServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< UserServiceIfFactory > handlerFactory_;
};

class UserServiceMultiface : virtual public UserServiceIf {
 public:
  UserServiceMultiface(std::vector<boost::shared_ptr<UserServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UserServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<UserServiceIf> > ifaces_;
  UserServiceMultiface() {}
  void add(boost::shared_ptr<UserServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void storeUser(const User& user) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->storeUser(user);
    }
    ifaces_[i]->storeUser(user);
  }

  void retrieveUserById(User& _return, const int32_t uid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->retrieveUserById(_return, uid);
    }
    ifaces_[i]->retrieveUserById(_return, uid);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class UserServiceConcurrentClient : virtual public UserServiceIf {
 public:
  UserServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UserServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void storeUser(const User& user);
  int32_t send_storeUser(const User& user);
  void recv_storeUser(const int32_t seqid);
  void retrieveUserById(User& _return, const int32_t uid);
  int32_t send_retrieveUserById(const int32_t uid);
  void recv_retrieveUserById(User& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}} // namespace

#endif
