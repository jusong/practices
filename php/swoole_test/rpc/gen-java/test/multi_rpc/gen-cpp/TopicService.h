/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TopicService_H
#define TopicService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "topic_types.h"

namespace multi { namespace service {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TopicServiceIf {
 public:
  virtual ~TopicServiceIf() {}
  virtual void storeTopic(const Topic& topic) = 0;
  virtual void retrieveTopicById(Topic& _return, const int32_t id) = 0;
  virtual void retrieveTopicByUid(Topic& _return, const int32_t uid) = 0;
};

class TopicServiceIfFactory {
 public:
  typedef TopicServiceIf Handler;

  virtual ~TopicServiceIfFactory() {}

  virtual TopicServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TopicServiceIf* /* handler */) = 0;
};

class TopicServiceIfSingletonFactory : virtual public TopicServiceIfFactory {
 public:
  TopicServiceIfSingletonFactory(const boost::shared_ptr<TopicServiceIf>& iface) : iface_(iface) {}
  virtual ~TopicServiceIfSingletonFactory() {}

  virtual TopicServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TopicServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TopicServiceIf> iface_;
};

class TopicServiceNull : virtual public TopicServiceIf {
 public:
  virtual ~TopicServiceNull() {}
  void storeTopic(const Topic& /* topic */) {
    return;
  }
  void retrieveTopicById(Topic& /* _return */, const int32_t /* id */) {
    return;
  }
  void retrieveTopicByUid(Topic& /* _return */, const int32_t /* uid */) {
    return;
  }
};

typedef struct _TopicService_storeTopic_args__isset {
  _TopicService_storeTopic_args__isset() : topic(false) {}
  bool topic :1;
} _TopicService_storeTopic_args__isset;

class TopicService_storeTopic_args {
 public:

  TopicService_storeTopic_args(const TopicService_storeTopic_args&);
  TopicService_storeTopic_args& operator=(const TopicService_storeTopic_args&);
  TopicService_storeTopic_args() {
  }

  virtual ~TopicService_storeTopic_args() throw();
  Topic topic;

  _TopicService_storeTopic_args__isset __isset;

  void __set_topic(const Topic& val);

  bool operator == (const TopicService_storeTopic_args & rhs) const
  {
    if (!(topic == rhs.topic))
      return false;
    return true;
  }
  bool operator != (const TopicService_storeTopic_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_storeTopic_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TopicService_storeTopic_pargs {
 public:


  virtual ~TopicService_storeTopic_pargs() throw();
  const Topic* topic;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TopicService_storeTopic_result {
 public:

  TopicService_storeTopic_result(const TopicService_storeTopic_result&);
  TopicService_storeTopic_result& operator=(const TopicService_storeTopic_result&);
  TopicService_storeTopic_result() {
  }

  virtual ~TopicService_storeTopic_result() throw();

  bool operator == (const TopicService_storeTopic_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TopicService_storeTopic_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_storeTopic_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TopicService_storeTopic_presult {
 public:


  virtual ~TopicService_storeTopic_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TopicService_retrieveTopicById_args__isset {
  _TopicService_retrieveTopicById_args__isset() : id(false) {}
  bool id :1;
} _TopicService_retrieveTopicById_args__isset;

class TopicService_retrieveTopicById_args {
 public:

  TopicService_retrieveTopicById_args(const TopicService_retrieveTopicById_args&);
  TopicService_retrieveTopicById_args& operator=(const TopicService_retrieveTopicById_args&);
  TopicService_retrieveTopicById_args() : id(0) {
  }

  virtual ~TopicService_retrieveTopicById_args() throw();
  int32_t id;

  _TopicService_retrieveTopicById_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const TopicService_retrieveTopicById_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const TopicService_retrieveTopicById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_retrieveTopicById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TopicService_retrieveTopicById_pargs {
 public:


  virtual ~TopicService_retrieveTopicById_pargs() throw();
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicService_retrieveTopicById_result__isset {
  _TopicService_retrieveTopicById_result__isset() : success(false) {}
  bool success :1;
} _TopicService_retrieveTopicById_result__isset;

class TopicService_retrieveTopicById_result {
 public:

  TopicService_retrieveTopicById_result(const TopicService_retrieveTopicById_result&);
  TopicService_retrieveTopicById_result& operator=(const TopicService_retrieveTopicById_result&);
  TopicService_retrieveTopicById_result() {
  }

  virtual ~TopicService_retrieveTopicById_result() throw();
  Topic success;

  _TopicService_retrieveTopicById_result__isset __isset;

  void __set_success(const Topic& val);

  bool operator == (const TopicService_retrieveTopicById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TopicService_retrieveTopicById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_retrieveTopicById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicService_retrieveTopicById_presult__isset {
  _TopicService_retrieveTopicById_presult__isset() : success(false) {}
  bool success :1;
} _TopicService_retrieveTopicById_presult__isset;

class TopicService_retrieveTopicById_presult {
 public:


  virtual ~TopicService_retrieveTopicById_presult() throw();
  Topic* success;

  _TopicService_retrieveTopicById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TopicService_retrieveTopicByUid_args__isset {
  _TopicService_retrieveTopicByUid_args__isset() : uid(false) {}
  bool uid :1;
} _TopicService_retrieveTopicByUid_args__isset;

class TopicService_retrieveTopicByUid_args {
 public:

  TopicService_retrieveTopicByUid_args(const TopicService_retrieveTopicByUid_args&);
  TopicService_retrieveTopicByUid_args& operator=(const TopicService_retrieveTopicByUid_args&);
  TopicService_retrieveTopicByUid_args() : uid(0) {
  }

  virtual ~TopicService_retrieveTopicByUid_args() throw();
  int32_t uid;

  _TopicService_retrieveTopicByUid_args__isset __isset;

  void __set_uid(const int32_t val);

  bool operator == (const TopicService_retrieveTopicByUid_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const TopicService_retrieveTopicByUid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_retrieveTopicByUid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TopicService_retrieveTopicByUid_pargs {
 public:


  virtual ~TopicService_retrieveTopicByUid_pargs() throw();
  const int32_t* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicService_retrieveTopicByUid_result__isset {
  _TopicService_retrieveTopicByUid_result__isset() : success(false) {}
  bool success :1;
} _TopicService_retrieveTopicByUid_result__isset;

class TopicService_retrieveTopicByUid_result {
 public:

  TopicService_retrieveTopicByUid_result(const TopicService_retrieveTopicByUid_result&);
  TopicService_retrieveTopicByUid_result& operator=(const TopicService_retrieveTopicByUid_result&);
  TopicService_retrieveTopicByUid_result() {
  }

  virtual ~TopicService_retrieveTopicByUid_result() throw();
  Topic success;

  _TopicService_retrieveTopicByUid_result__isset __isset;

  void __set_success(const Topic& val);

  bool operator == (const TopicService_retrieveTopicByUid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TopicService_retrieveTopicByUid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopicService_retrieveTopicByUid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TopicService_retrieveTopicByUid_presult__isset {
  _TopicService_retrieveTopicByUid_presult__isset() : success(false) {}
  bool success :1;
} _TopicService_retrieveTopicByUid_presult__isset;

class TopicService_retrieveTopicByUid_presult {
 public:


  virtual ~TopicService_retrieveTopicByUid_presult() throw();
  Topic* success;

  _TopicService_retrieveTopicByUid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TopicServiceClient : virtual public TopicServiceIf {
 public:
  TopicServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TopicServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void storeTopic(const Topic& topic);
  void send_storeTopic(const Topic& topic);
  void recv_storeTopic();
  void retrieveTopicById(Topic& _return, const int32_t id);
  void send_retrieveTopicById(const int32_t id);
  void recv_retrieveTopicById(Topic& _return);
  void retrieveTopicByUid(Topic& _return, const int32_t uid);
  void send_retrieveTopicByUid(const int32_t uid);
  void recv_retrieveTopicByUid(Topic& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TopicServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TopicServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TopicServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_storeTopic(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_retrieveTopicById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_retrieveTopicByUid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TopicServiceProcessor(boost::shared_ptr<TopicServiceIf> iface) :
    iface_(iface) {
    processMap_["storeTopic"] = &TopicServiceProcessor::process_storeTopic;
    processMap_["retrieveTopicById"] = &TopicServiceProcessor::process_retrieveTopicById;
    processMap_["retrieveTopicByUid"] = &TopicServiceProcessor::process_retrieveTopicByUid;
  }

  virtual ~TopicServiceProcessor() {}
};

class TopicServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TopicServiceProcessorFactory(const ::boost::shared_ptr< TopicServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TopicServiceIfFactory > handlerFactory_;
};

class TopicServiceMultiface : virtual public TopicServiceIf {
 public:
  TopicServiceMultiface(std::vector<boost::shared_ptr<TopicServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TopicServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TopicServiceIf> > ifaces_;
  TopicServiceMultiface() {}
  void add(boost::shared_ptr<TopicServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void storeTopic(const Topic& topic) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->storeTopic(topic);
    }
    ifaces_[i]->storeTopic(topic);
  }

  void retrieveTopicById(Topic& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->retrieveTopicById(_return, id);
    }
    ifaces_[i]->retrieveTopicById(_return, id);
    return;
  }

  void retrieveTopicByUid(Topic& _return, const int32_t uid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->retrieveTopicByUid(_return, uid);
    }
    ifaces_[i]->retrieveTopicByUid(_return, uid);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TopicServiceConcurrentClient : virtual public TopicServiceIf {
 public:
  TopicServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TopicServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void storeTopic(const Topic& topic);
  int32_t send_storeTopic(const Topic& topic);
  void recv_storeTopic(const int32_t seqid);
  void retrieveTopicById(Topic& _return, const int32_t id);
  int32_t send_retrieveTopicById(const int32_t id);
  void recv_retrieveTopicById(Topic& _return, const int32_t seqid);
  void retrieveTopicByUid(Topic& _return, const int32_t uid);
  int32_t send_retrieveTopicByUid(const int32_t uid);
  void recv_retrieveTopicByUid(Topic& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}} // namespace

#endif
