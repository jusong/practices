/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef topic_TYPES_H
#define topic_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace multi { namespace service {

class Topic;

typedef struct _Topic__isset {
  _Topic__isset() : id(false), uid(false), name(false), content(false) {}
  bool id :1;
  bool uid :1;
  bool name :1;
  bool content :1;
} _Topic__isset;

class Topic : public virtual ::apache::thrift::TBase {
 public:

  Topic(const Topic&);
  Topic& operator=(const Topic&);
  Topic() : id(0), uid(0), name(), content() {
  }

  virtual ~Topic() throw();
  int32_t id;
  int32_t uid;
  std::string name;
  std::string content;

  _Topic__isset __isset;

  void __set_id(const int32_t val);

  void __set_uid(const int32_t val);

  void __set_name(const std::string& val);

  void __set_content(const std::string& val);

  bool operator == (const Topic & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(uid == rhs.uid))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const Topic &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Topic & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Topic &a, Topic &b);

inline std::ostream& operator<<(std::ostream& out, const Topic& obj)
{
  obj.printTo(out);
  return out;
}

}} // namespace

#endif
