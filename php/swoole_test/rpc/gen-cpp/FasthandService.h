/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FasthandService_H
#define FasthandService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "Fasthand_types.h"

namespace Fasthand {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class FasthandServiceIf {
 public:
  virtual ~FasthandServiceIf() {}
  virtual void getUserInfo(std::map<std::string, std::string> & _return, const int32_t userId) = 0;
  virtual void getAreaInfo(std::vector<Area> & _return) = 0;
  virtual void getAreaNameList(std::vector< ::shared::SharedStruct> & _return) = 0;
  virtual int64_t getTime() = 0;
  virtual void upFirstChar(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & paramArray) = 0;
};

class FasthandServiceIfFactory {
 public:
  typedef FasthandServiceIf Handler;

  virtual ~FasthandServiceIfFactory() {}

  virtual FasthandServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FasthandServiceIf* /* handler */) = 0;
};

class FasthandServiceIfSingletonFactory : virtual public FasthandServiceIfFactory {
 public:
  FasthandServiceIfSingletonFactory(const boost::shared_ptr<FasthandServiceIf>& iface) : iface_(iface) {}
  virtual ~FasthandServiceIfSingletonFactory() {}

  virtual FasthandServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FasthandServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<FasthandServiceIf> iface_;
};

class FasthandServiceNull : virtual public FasthandServiceIf {
 public:
  virtual ~FasthandServiceNull() {}
  void getUserInfo(std::map<std::string, std::string> & /* _return */, const int32_t /* userId */) {
    return;
  }
  void getAreaInfo(std::vector<Area> & /* _return */) {
    return;
  }
  void getAreaNameList(std::vector< ::shared::SharedStruct> & /* _return */) {
    return;
  }
  int64_t getTime() {
    int64_t _return = 0;
    return _return;
  }
  void upFirstChar(std::map<std::string, std::string> & /* _return */, const std::map<std::string, std::string> & /* paramArray */) {
    return;
  }
};

typedef struct _FasthandService_getUserInfo_args__isset {
  _FasthandService_getUserInfo_args__isset() : userId(false) {}
  bool userId :1;
} _FasthandService_getUserInfo_args__isset;

class FasthandService_getUserInfo_args {
 public:

  FasthandService_getUserInfo_args(const FasthandService_getUserInfo_args&);
  FasthandService_getUserInfo_args& operator=(const FasthandService_getUserInfo_args&);
  FasthandService_getUserInfo_args() : userId(0) {
  }

  virtual ~FasthandService_getUserInfo_args() throw();
  int32_t userId;

  _FasthandService_getUserInfo_args__isset __isset;

  void __set_userId(const int32_t val);

  bool operator == (const FasthandService_getUserInfo_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const FasthandService_getUserInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FasthandService_getUserInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FasthandService_getUserInfo_pargs {
 public:


  virtual ~FasthandService_getUserInfo_pargs() throw();
  const int32_t* userId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FasthandService_getUserInfo_result__isset {
  _FasthandService_getUserInfo_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _FasthandService_getUserInfo_result__isset;

class FasthandService_getUserInfo_result {
 public:

  FasthandService_getUserInfo_result(const FasthandService_getUserInfo_result&);
  FasthandService_getUserInfo_result& operator=(const FasthandService_getUserInfo_result&);
  FasthandService_getUserInfo_result() {
  }

  virtual ~FasthandService_getUserInfo_result() throw();
  std::map<std::string, std::string>  success;
   ::shared::InvalideService ouch;

  _FasthandService_getUserInfo_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  void __set_ouch(const  ::shared::InvalideService& val);

  bool operator == (const FasthandService_getUserInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const FasthandService_getUserInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FasthandService_getUserInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FasthandService_getUserInfo_presult__isset {
  _FasthandService_getUserInfo_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _FasthandService_getUserInfo_presult__isset;

class FasthandService_getUserInfo_presult {
 public:


  virtual ~FasthandService_getUserInfo_presult() throw();
  std::map<std::string, std::string> * success;
   ::shared::InvalideService ouch;

  _FasthandService_getUserInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class FasthandService_getAreaInfo_args {
 public:

  FasthandService_getAreaInfo_args(const FasthandService_getAreaInfo_args&);
  FasthandService_getAreaInfo_args& operator=(const FasthandService_getAreaInfo_args&);
  FasthandService_getAreaInfo_args() {
  }

  virtual ~FasthandService_getAreaInfo_args() throw();

  bool operator == (const FasthandService_getAreaInfo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FasthandService_getAreaInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FasthandService_getAreaInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FasthandService_getAreaInfo_pargs {
 public:


  virtual ~FasthandService_getAreaInfo_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FasthandService_getAreaInfo_result__isset {
  _FasthandService_getAreaInfo_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _FasthandService_getAreaInfo_result__isset;

class FasthandService_getAreaInfo_result {
 public:

  FasthandService_getAreaInfo_result(const FasthandService_getAreaInfo_result&);
  FasthandService_getAreaInfo_result& operator=(const FasthandService_getAreaInfo_result&);
  FasthandService_getAreaInfo_result() {
  }

  virtual ~FasthandService_getAreaInfo_result() throw();
  std::vector<Area>  success;
   ::shared::InvalideService ouch;

  _FasthandService_getAreaInfo_result__isset __isset;

  void __set_success(const std::vector<Area> & val);

  void __set_ouch(const  ::shared::InvalideService& val);

  bool operator == (const FasthandService_getAreaInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const FasthandService_getAreaInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FasthandService_getAreaInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FasthandService_getAreaInfo_presult__isset {
  _FasthandService_getAreaInfo_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _FasthandService_getAreaInfo_presult__isset;

class FasthandService_getAreaInfo_presult {
 public:


  virtual ~FasthandService_getAreaInfo_presult() throw();
  std::vector<Area> * success;
   ::shared::InvalideService ouch;

  _FasthandService_getAreaInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class FasthandService_getAreaNameList_args {
 public:

  FasthandService_getAreaNameList_args(const FasthandService_getAreaNameList_args&);
  FasthandService_getAreaNameList_args& operator=(const FasthandService_getAreaNameList_args&);
  FasthandService_getAreaNameList_args() {
  }

  virtual ~FasthandService_getAreaNameList_args() throw();

  bool operator == (const FasthandService_getAreaNameList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FasthandService_getAreaNameList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FasthandService_getAreaNameList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FasthandService_getAreaNameList_pargs {
 public:


  virtual ~FasthandService_getAreaNameList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FasthandService_getAreaNameList_result__isset {
  _FasthandService_getAreaNameList_result__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _FasthandService_getAreaNameList_result__isset;

class FasthandService_getAreaNameList_result {
 public:

  FasthandService_getAreaNameList_result(const FasthandService_getAreaNameList_result&);
  FasthandService_getAreaNameList_result& operator=(const FasthandService_getAreaNameList_result&);
  FasthandService_getAreaNameList_result() {
  }

  virtual ~FasthandService_getAreaNameList_result() throw();
  std::vector< ::shared::SharedStruct>  success;
   ::shared::InvalideService ouch;

  _FasthandService_getAreaNameList_result__isset __isset;

  void __set_success(const std::vector< ::shared::SharedStruct> & val);

  void __set_ouch(const  ::shared::InvalideService& val);

  bool operator == (const FasthandService_getAreaNameList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ouch == rhs.ouch))
      return false;
    return true;
  }
  bool operator != (const FasthandService_getAreaNameList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FasthandService_getAreaNameList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FasthandService_getAreaNameList_presult__isset {
  _FasthandService_getAreaNameList_presult__isset() : success(false), ouch(false) {}
  bool success :1;
  bool ouch :1;
} _FasthandService_getAreaNameList_presult__isset;

class FasthandService_getAreaNameList_presult {
 public:


  virtual ~FasthandService_getAreaNameList_presult() throw();
  std::vector< ::shared::SharedStruct> * success;
   ::shared::InvalideService ouch;

  _FasthandService_getAreaNameList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class FasthandService_getTime_args {
 public:

  FasthandService_getTime_args(const FasthandService_getTime_args&);
  FasthandService_getTime_args& operator=(const FasthandService_getTime_args&);
  FasthandService_getTime_args() {
  }

  virtual ~FasthandService_getTime_args() throw();

  bool operator == (const FasthandService_getTime_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FasthandService_getTime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FasthandService_getTime_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FasthandService_getTime_pargs {
 public:


  virtual ~FasthandService_getTime_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FasthandService_getTime_result__isset {
  _FasthandService_getTime_result__isset() : success(false) {}
  bool success :1;
} _FasthandService_getTime_result__isset;

class FasthandService_getTime_result {
 public:

  FasthandService_getTime_result(const FasthandService_getTime_result&);
  FasthandService_getTime_result& operator=(const FasthandService_getTime_result&);
  FasthandService_getTime_result() : success(0) {
  }

  virtual ~FasthandService_getTime_result() throw();
  int64_t success;

  _FasthandService_getTime_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const FasthandService_getTime_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FasthandService_getTime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FasthandService_getTime_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FasthandService_getTime_presult__isset {
  _FasthandService_getTime_presult__isset() : success(false) {}
  bool success :1;
} _FasthandService_getTime_presult__isset;

class FasthandService_getTime_presult {
 public:


  virtual ~FasthandService_getTime_presult() throw();
  int64_t* success;

  _FasthandService_getTime_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FasthandService_upFirstChar_args__isset {
  _FasthandService_upFirstChar_args__isset() : paramArray(false) {}
  bool paramArray :1;
} _FasthandService_upFirstChar_args__isset;

class FasthandService_upFirstChar_args {
 public:

  FasthandService_upFirstChar_args(const FasthandService_upFirstChar_args&);
  FasthandService_upFirstChar_args& operator=(const FasthandService_upFirstChar_args&);
  FasthandService_upFirstChar_args() {
  }

  virtual ~FasthandService_upFirstChar_args() throw();
  std::map<std::string, std::string>  paramArray;

  _FasthandService_upFirstChar_args__isset __isset;

  void __set_paramArray(const std::map<std::string, std::string> & val);

  bool operator == (const FasthandService_upFirstChar_args & rhs) const
  {
    if (!(paramArray == rhs.paramArray))
      return false;
    return true;
  }
  bool operator != (const FasthandService_upFirstChar_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FasthandService_upFirstChar_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FasthandService_upFirstChar_pargs {
 public:


  virtual ~FasthandService_upFirstChar_pargs() throw();
  const std::map<std::string, std::string> * paramArray;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FasthandService_upFirstChar_result__isset {
  _FasthandService_upFirstChar_result__isset() : success(false) {}
  bool success :1;
} _FasthandService_upFirstChar_result__isset;

class FasthandService_upFirstChar_result {
 public:

  FasthandService_upFirstChar_result(const FasthandService_upFirstChar_result&);
  FasthandService_upFirstChar_result& operator=(const FasthandService_upFirstChar_result&);
  FasthandService_upFirstChar_result() {
  }

  virtual ~FasthandService_upFirstChar_result() throw();
  std::map<std::string, std::string>  success;

  _FasthandService_upFirstChar_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  bool operator == (const FasthandService_upFirstChar_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FasthandService_upFirstChar_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FasthandService_upFirstChar_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _FasthandService_upFirstChar_presult__isset {
  _FasthandService_upFirstChar_presult__isset() : success(false) {}
  bool success :1;
} _FasthandService_upFirstChar_presult__isset;

class FasthandService_upFirstChar_presult {
 public:


  virtual ~FasthandService_upFirstChar_presult() throw();
  std::map<std::string, std::string> * success;

  _FasthandService_upFirstChar_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FasthandServiceClient : virtual public FasthandServiceIf {
 public:
  FasthandServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FasthandServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getUserInfo(std::map<std::string, std::string> & _return, const int32_t userId);
  void send_getUserInfo(const int32_t userId);
  void recv_getUserInfo(std::map<std::string, std::string> & _return);
  void getAreaInfo(std::vector<Area> & _return);
  void send_getAreaInfo();
  void recv_getAreaInfo(std::vector<Area> & _return);
  void getAreaNameList(std::vector< ::shared::SharedStruct> & _return);
  void send_getAreaNameList();
  void recv_getAreaNameList(std::vector< ::shared::SharedStruct> & _return);
  int64_t getTime();
  void send_getTime();
  int64_t recv_getTime();
  void upFirstChar(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & paramArray);
  void send_upFirstChar(const std::map<std::string, std::string> & paramArray);
  void recv_upFirstChar(std::map<std::string, std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FasthandServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<FasthandServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FasthandServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getUserInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAreaInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAreaNameList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTime(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_upFirstChar(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FasthandServiceProcessor(boost::shared_ptr<FasthandServiceIf> iface) :
    iface_(iface) {
    processMap_["getUserInfo"] = &FasthandServiceProcessor::process_getUserInfo;
    processMap_["getAreaInfo"] = &FasthandServiceProcessor::process_getAreaInfo;
    processMap_["getAreaNameList"] = &FasthandServiceProcessor::process_getAreaNameList;
    processMap_["getTime"] = &FasthandServiceProcessor::process_getTime;
    processMap_["upFirstChar"] = &FasthandServiceProcessor::process_upFirstChar;
  }

  virtual ~FasthandServiceProcessor() {}
};

class FasthandServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FasthandServiceProcessorFactory(const ::boost::shared_ptr< FasthandServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< FasthandServiceIfFactory > handlerFactory_;
};

class FasthandServiceMultiface : virtual public FasthandServiceIf {
 public:
  FasthandServiceMultiface(std::vector<boost::shared_ptr<FasthandServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FasthandServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<FasthandServiceIf> > ifaces_;
  FasthandServiceMultiface() {}
  void add(boost::shared_ptr<FasthandServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getUserInfo(std::map<std::string, std::string> & _return, const int32_t userId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserInfo(_return, userId);
    }
    ifaces_[i]->getUserInfo(_return, userId);
    return;
  }

  void getAreaInfo(std::vector<Area> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAreaInfo(_return);
    }
    ifaces_[i]->getAreaInfo(_return);
    return;
  }

  void getAreaNameList(std::vector< ::shared::SharedStruct> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAreaNameList(_return);
    }
    ifaces_[i]->getAreaNameList(_return);
    return;
  }

  int64_t getTime() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTime();
    }
    return ifaces_[i]->getTime();
  }

  void upFirstChar(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & paramArray) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->upFirstChar(_return, paramArray);
    }
    ifaces_[i]->upFirstChar(_return, paramArray);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class FasthandServiceConcurrentClient : virtual public FasthandServiceIf {
 public:
  FasthandServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FasthandServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getUserInfo(std::map<std::string, std::string> & _return, const int32_t userId);
  int32_t send_getUserInfo(const int32_t userId);
  void recv_getUserInfo(std::map<std::string, std::string> & _return, const int32_t seqid);
  void getAreaInfo(std::vector<Area> & _return);
  int32_t send_getAreaInfo();
  void recv_getAreaInfo(std::vector<Area> & _return, const int32_t seqid);
  void getAreaNameList(std::vector< ::shared::SharedStruct> & _return);
  int32_t send_getAreaNameList();
  void recv_getAreaNameList(std::vector< ::shared::SharedStruct> & _return, const int32_t seqid);
  int64_t getTime();
  int32_t send_getTime();
  int64_t recv_getTime(const int32_t seqid);
  void upFirstChar(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & paramArray);
  int32_t send_upFirstChar(const std::map<std::string, std::string> & paramArray);
  void recv_upFirstChar(std::map<std::string, std::string> & _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
