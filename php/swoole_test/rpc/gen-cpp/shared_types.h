/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef shared_TYPES_H
#define shared_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace shared {

class InvalideService;

class SharedStruct;

typedef struct _InvalideService__isset {
  _InvalideService__isset() : code(false), message(false) {}
  bool code :1;
  bool message :1;
} _InvalideService__isset;

class InvalideService : public ::apache::thrift::TException {
 public:

  InvalideService(const InvalideService&);
  InvalideService& operator=(const InvalideService&);
  InvalideService() : code(0), message() {
  }

  virtual ~InvalideService() throw();
  int32_t code;
  std::string message;

  _InvalideService__isset __isset;

  void __set_code(const int32_t val);

  void __set_message(const std::string& val);

  bool operator == (const InvalideService & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const InvalideService &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalideService & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalideService &a, InvalideService &b);

inline std::ostream& operator<<(std::ostream& out, const InvalideService& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SharedStruct__isset {
  _SharedStruct__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _SharedStruct__isset;

class SharedStruct {
 public:

  SharedStruct(const SharedStruct&);
  SharedStruct& operator=(const SharedStruct&);
  SharedStruct() : key(0), value() {
  }

  virtual ~SharedStruct() throw();
  int32_t key;
  std::string value;

  _SharedStruct__isset __isset;

  void __set_key(const int32_t val);

  void __set_value(const std::string& val);

  bool operator == (const SharedStruct & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const SharedStruct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SharedStruct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SharedStruct &a, SharedStruct &b);

inline std::ostream& operator<<(std::ostream& out, const SharedStruct& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
