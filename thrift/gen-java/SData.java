/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SData implements org.apache.thrift.TBase<SData, SData._Fields>, java.io.Serializable, Cloneable, Comparable<SData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SData");

  private static final org.apache.thrift.protocol.TField ___SERVICENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("__SERVICENAME", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ___METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("__METHOD", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ___PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("__PARAM", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SDataTupleSchemeFactory());
  }

  public String __SERVICENAME; // required
  public String __METHOD; // required
  public String __PARAM; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ___SERVICENAME((short)1, "__SERVICENAME"),
    ___METHOD((short)2, "__METHOD"),
    ___PARAM((short)3, "__PARAM");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ___SERVICENAME
          return ___SERVICENAME;
        case 2: // ___METHOD
          return ___METHOD;
        case 3: // ___PARAM
          return ___PARAM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.___PARAM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.___SERVICENAME, new org.apache.thrift.meta_data.FieldMetaData("__SERVICENAME", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.___METHOD, new org.apache.thrift.meta_data.FieldMetaData("__METHOD", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.___PARAM, new org.apache.thrift.meta_data.FieldMetaData("__PARAM", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SData.class, metaDataMap);
  }

  public SData() {
  }

  public SData(
    String __SERVICENAME,
    String __METHOD)
  {
    this();
    this.__SERVICENAME = __SERVICENAME;
    this.__METHOD = __METHOD;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SData(SData other) {
    if (other.isSet__SERVICENAME()) {
      this.__SERVICENAME = other.__SERVICENAME;
    }
    if (other.isSet__METHOD()) {
      this.__METHOD = other.__METHOD;
    }
    if (other.isSet__PARAM()) {
      this.__PARAM = other.__PARAM;
    }
  }

  public SData deepCopy() {
    return new SData(this);
  }

  @Override
  public void clear() {
    this.__SERVICENAME = null;
    this.__METHOD = null;
    this.__PARAM = null;
  }

  public String get__SERVICENAME() {
    return this.__SERVICENAME;
  }

  public SData set__SERVICENAME(String __SERVICENAME) {
    this.__SERVICENAME = __SERVICENAME;
    return this;
  }

  public void unset__SERVICENAME() {
    this.__SERVICENAME = null;
  }

  /** Returns true if field __SERVICENAME is set (has been assigned a value) and false otherwise */
  public boolean isSet__SERVICENAME() {
    return this.__SERVICENAME != null;
  }

  public void set__SERVICENAMEIsSet(boolean value) {
    if (!value) {
      this.__SERVICENAME = null;
    }
  }

  public String get__METHOD() {
    return this.__METHOD;
  }

  public SData set__METHOD(String __METHOD) {
    this.__METHOD = __METHOD;
    return this;
  }

  public void unset__METHOD() {
    this.__METHOD = null;
  }

  /** Returns true if field __METHOD is set (has been assigned a value) and false otherwise */
  public boolean isSet__METHOD() {
    return this.__METHOD != null;
  }

  public void set__METHODIsSet(boolean value) {
    if (!value) {
      this.__METHOD = null;
    }
  }

  public String get__PARAM() {
    return this.__PARAM;
  }

  public SData set__PARAM(String __PARAM) {
    this.__PARAM = __PARAM;
    return this;
  }

  public void unset__PARAM() {
    this.__PARAM = null;
  }

  /** Returns true if field __PARAM is set (has been assigned a value) and false otherwise */
  public boolean isSet__PARAM() {
    return this.__PARAM != null;
  }

  public void set__PARAMIsSet(boolean value) {
    if (!value) {
      this.__PARAM = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ___SERVICENAME:
      if (value == null) {
        unset__SERVICENAME();
      } else {
        set__SERVICENAME((String)value);
      }
      break;

    case ___METHOD:
      if (value == null) {
        unset__METHOD();
      } else {
        set__METHOD((String)value);
      }
      break;

    case ___PARAM:
      if (value == null) {
        unset__PARAM();
      } else {
        set__PARAM((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ___SERVICENAME:
      return get__SERVICENAME();

    case ___METHOD:
      return get__METHOD();

    case ___PARAM:
      return get__PARAM();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ___SERVICENAME:
      return isSet__SERVICENAME();
    case ___METHOD:
      return isSet__METHOD();
    case ___PARAM:
      return isSet__PARAM();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SData)
      return this.equals((SData)that);
    return false;
  }

  public boolean equals(SData that) {
    if (that == null)
      return false;

    boolean this_present___SERVICENAME = true && this.isSet__SERVICENAME();
    boolean that_present___SERVICENAME = true && that.isSet__SERVICENAME();
    if (this_present___SERVICENAME || that_present___SERVICENAME) {
      if (!(this_present___SERVICENAME && that_present___SERVICENAME))
        return false;
      if (!this.__SERVICENAME.equals(that.__SERVICENAME))
        return false;
    }

    boolean this_present___METHOD = true && this.isSet__METHOD();
    boolean that_present___METHOD = true && that.isSet__METHOD();
    if (this_present___METHOD || that_present___METHOD) {
      if (!(this_present___METHOD && that_present___METHOD))
        return false;
      if (!this.__METHOD.equals(that.__METHOD))
        return false;
    }

    boolean this_present___PARAM = true && this.isSet__PARAM();
    boolean that_present___PARAM = true && that.isSet__PARAM();
    if (this_present___PARAM || that_present___PARAM) {
      if (!(this_present___PARAM && that_present___PARAM))
        return false;
      if (!this.__PARAM.equals(that.__PARAM))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSet__SERVICENAME()).compareTo(other.isSet__SERVICENAME());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet__SERVICENAME()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.__SERVICENAME, other.__SERVICENAME);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet__METHOD()).compareTo(other.isSet__METHOD());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet__METHOD()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.__METHOD, other.__METHOD);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSet__PARAM()).compareTo(other.isSet__PARAM());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet__PARAM()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.__PARAM, other.__PARAM);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SData(");
    boolean first = true;

    sb.append("__SERVICENAME:");
    if (this.__SERVICENAME == null) {
      sb.append("null");
    } else {
      sb.append(this.__SERVICENAME);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("__METHOD:");
    if (this.__METHOD == null) {
      sb.append("null");
    } else {
      sb.append(this.__METHOD);
    }
    first = false;
    if (isSet__PARAM()) {
      if (!first) sb.append(", ");
      sb.append("__PARAM:");
      if (this.__PARAM == null) {
        sb.append("null");
      } else {
        sb.append(this.__PARAM);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SDataStandardSchemeFactory implements SchemeFactory {
    public SDataStandardScheme getScheme() {
      return new SDataStandardScheme();
    }
  }

  private static class SDataStandardScheme extends StandardScheme<SData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ___SERVICENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.__SERVICENAME = iprot.readString();
              struct.set__SERVICENAMEIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ___METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.__METHOD = iprot.readString();
              struct.set__METHODIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ___PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.__PARAM = iprot.readString();
              struct.set__PARAMIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.__SERVICENAME != null) {
        oprot.writeFieldBegin(___SERVICENAME_FIELD_DESC);
        oprot.writeString(struct.__SERVICENAME);
        oprot.writeFieldEnd();
      }
      if (struct.__METHOD != null) {
        oprot.writeFieldBegin(___METHOD_FIELD_DESC);
        oprot.writeString(struct.__METHOD);
        oprot.writeFieldEnd();
      }
      if (struct.__PARAM != null) {
        if (struct.isSet__PARAM()) {
          oprot.writeFieldBegin(___PARAM_FIELD_DESC);
          oprot.writeString(struct.__PARAM);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SDataTupleSchemeFactory implements SchemeFactory {
    public SDataTupleScheme getScheme() {
      return new SDataTupleScheme();
    }
  }

  private static class SDataTupleScheme extends TupleScheme<SData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSet__SERVICENAME()) {
        optionals.set(0);
      }
      if (struct.isSet__METHOD()) {
        optionals.set(1);
      }
      if (struct.isSet__PARAM()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSet__SERVICENAME()) {
        oprot.writeString(struct.__SERVICENAME);
      }
      if (struct.isSet__METHOD()) {
        oprot.writeString(struct.__METHOD);
      }
      if (struct.isSet__PARAM()) {
        oprot.writeString(struct.__PARAM);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.__SERVICENAME = iprot.readString();
        struct.set__SERVICENAMEIsSet(true);
      }
      if (incoming.get(1)) {
        struct.__METHOD = iprot.readString();
        struct.set__METHODIsSet(true);
      }
      if (incoming.get(2)) {
        struct.__PARAM = iprot.readString();
        struct.set__PARAMIsSet(true);
      }
    }
  }

}

