<?php
namespace Fasthand\Service\Order;
/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface OrderServiceIf {
  /**
   */
  public function OrderService();
  /**
   * @param array $fasthand_order
   */
  public function addOrderHistory(array $fasthand_order);
  /**
   * @param int $eventId
   * @param string $eventType
   * @param int $number
   */
  public function updatePayNum($eventId, $eventType, $number);
  /**
   * @param int $event_id
   * @param string $type
   * @param int $order_id
   */
  public function sendCheckSmsToSeller($event_id, $type, $order_id);
  /**
   * @param int $userId
   * @param int $order_id
   * @param int $integral_num
   */
  public function sendCheckSmsToStudent($userId, $order_id, $integral_num);
  /**
   * @param array $fasthand_order
   */
  public function sendPaySmsToStudent(array $fasthand_order);
  /**
   * @param array $fasthand_order
   * @param int $friend_user_id
   */
  public function sendPaySmsToSeller(array $fasthand_order, $friend_user_id);
  /**
   * @param int $id
   * @param int $status
   */
  public function updatePromotionStatus($id, $status);
  /**
   * @param int $promotionId
   * @param int $status
   */
  public function mUpdatePromotionUseNum($promotionId, $status);
  /**
   * @param int $userId
   */
  public function sendNotPaySms($userId);
  /**
   * @param int $user_id
   * @param int $event_id
   * @param string $type
   */
  public function sendNotPayMessage($user_id, $event_id, $type);
  /**
   * @param string $mobile
   * @param int $promotion_id
   * @param array $fasthand_item_promotion
   * @param int $user_id
   * @param double $amount
   * @return string
   */
  public function checkAllowReceiveCouponByMobile($mobile, $promotion_id, array $fasthand_item_promotion, $user_id, $amount);
  /**
   * @param int $userId
   * @param int $promotion_id
   * @param double $amount
   * @return string
   */
  public function checkAllowReceiveCouponByUserId($userId, $promotion_id, $amount);
  /**
   * @param string $mobile
   * @param int $userId
   * @return bool
   */
  public function updatePromotionUserByRegister($mobile, $userId);
  /**
   * @param int $my_promotion_id
   * @param int $userId
   * @return bool
   */
  public function checkPromotionStatus($my_promotion_id, $userId);
  /**
   * @param int $event_id
   * @param string $type
   * @param int $number
   * @param array $itemOriginVo
   * @return bool
   */
  public function checkInventoryStatus($event_id, $type, $number, array $itemOriginVo);
  /**
   * @param int $event_id
   * @param string $event_type
   * @param int $sku_id
   * @param int $number
   * @return bool
   */
  public function checkSkuInventoryStatus($event_id, $event_type, $sku_id, $number);
  /**
   * @param array $fasthand_order
   * @param string $type
   * @return bool
   */
  public function updateInventoryNumber(array $fasthand_order, $type);
  /**
   * @param int $event_id
   * @param string $event_type
   * @param int $type
   */
  public function syncPromotionToItem($event_id, $event_type, $type);
  /**
   * @param string $event_type
   * @param int $event_id
   * @return int
   */
  public function getPromotionUserId($event_type, $event_id);
  /**
   * @param int $city_id
   * @param string $client_source
   * @param string $content
   * @param string $effective_time
   * @param string $invalid_time
   * @param int $message_type
   * @param string $title
   * @param int $userId
   * @param int $userRole
   * @param array $dataArray
   * @return bool
   */
  public function addMessage($city_id, $client_source, $content, $effective_time, $invalid_time, $message_type, $title, $userId, $userRole, array $dataArray);
  /**
   * @param int $event_id
   * @param string $event_type
   * @return array
   */
  public function getPomotionInfoByItem($event_id, $event_type);
  /**
   * @param int $event_id
   * @param string $event_type
   * @param array $extendInfoArray
   * @return array
   */
  public function getItemSkuList($event_id, $event_type, array $extendInfoArray);
  /**
   * @param array $fasthand_activity
   * @return array
   */
  public function addSkuInfoByActivity(array $fasthand_activity);
  /**
   * @param int $userId
   * @return int
   */
  public function getOrderIntegralNum($userId);
  /**
   * @param int $userId
   * @param double $item_price
   * @param int $integral_num
   * @return double
   */
  public function getOrderIntegralConvertPrice($userId, $item_price, $integral_num);
  /**
   * @param string $certificates
   * @return string
   */
  public function transcodeCertificatesToDescribes($certificates);
  /**
   * @param int $type
   * @param double $price
   * @param double $amount
   * @return double
   */
  public function getPromotionPrice($type, $price, $amount);
  /**
   * @param int $type
   * @param double $promotionPrice
   * @param double $amount
   * @return double
   */
  public function getPriceByDiscountRate($type, $promotionPrice, $amount);
  /**
   * @param string $props
   * @param string $pids
   * @param string $vids
   */
  public function getPropValueByProps($props, $pids, $vids);
  /**
   * @param int $sku_id
   * @return string
   */
  public function getSkuPropValues($sku_id);
  /**
   * @param array $request
   * @param int $seller_id
   * @param int $seller_user_id
   * @return string
   */
  public function createItemSnapshotObject(array $request, $seller_id, $seller_user_id);
  /**
   * @param int $id
   * @param int $sku_id
   * @param string $properties
   * @return bool
   */
  public function updateActivityProps($id, $sku_id, $properties);
  /**
   * @param array $fasthand_item_skuArray
   * @param string $addProperties
   * @return string
   */
  public function createPropsBySkus(array $fasthand_item_skuArray, $addProperties);
  /**
   * @param int $userId
   * @param int $event_id
   * @param string $event_type
   * @return int
   */
  public function checkPromotionReceiveStatus($userId, $event_id, $event_type);
  /**
   * @param string $invite_code
   * @param int $userId
   * @param double $pay_amount
   * @param int $event_id
   * @return bool
   */
  public function addConsumIncomeRecord($invite_code, $userId, $pay_amount, $event_id);
  /**
   * @param string $invite_code
   * @param int $userId
   * @return bool
   */
  public function checkInviteCodeStatus($invite_code, $userId);
  /**
   * @param int $userId
   * @param double $amount
   * @param string $title
   * @param int $type
   * @param int $origin_user_id
   * @param int $status
   * @param int $event_id
   * @param string $event_type
   * @param string $action
   * @param array $fasthand_user
   * @return bool
   */
  public function addMyIncomeRecord($userId, $amount, $title, $type, $origin_user_id, $status, $event_id, $event_type, $action, array $fasthand_user);
  /**
   * @param string $event_id
   * @param string $event_type
   * @return string
   */
  public function createConsumCode($event_id, $event_type);
  /**
   * @param int $event_id
   * @param string $event_type
   * @param int $userId
   * @param bool $notType
   * @param bool $is_allow_promotion
   * @return array
   */
  public function getPromotionList($event_id, $event_type, $userId, $notType, $is_allow_promotion);
  /**
   * @param int $event_id
   * @param string $event_type
   * @param int $max_buy_num
   * @param int $userId
   * @return string
   */
  public function getMaxBuyNum($event_id, $event_type, $max_buy_num, $userId);
  /**
   * @param array $itemOriginVo
   * @param int $event_id
   * @param string $event_type
   * @param int $userId
   * @param int $number
   * @return bool
   */
  public function checkUserMaxBuyNum(array $itemOriginVo, $event_id, $event_type, $userId, $number);
  /**
   * @param int $event_id
   * @param string $type
   * @return string
   */
  public function getItemOriginVo($event_id, $type);
  /**
   * @param array $fasthand_item_promotion
   * @param string $pid
   * @return string
   */
  public function checkIsDiscount(array $fasthand_item_promotion, $pid);
  /**
   * @param int $sku_id
   * @return array
   */
  public function getSkuInfoById($sku_id);
  /**
   * @param int $coursesId
   * @param int $userId
   * @return array
   */
  public function getItemByCourses($coursesId, $userId);
  /**
   * @param int $activityId
   * @param int $userId
   * @return array
   */
  public function getItemByActivity($activityId, $userId);
  /**
   * @param int $activityId
   * @param int $userId
   * @return array
   */
  public function getItemAndPropByActivity($activityId, $userId);
  /**
   * @param string $vids
   * @param array $pidNameArray
   * @return array
   */
  public function getItemPropValueListByVids($vids, array $pidNameArray);
  /**
   * @param array $fasthand_item_propArray
   * @param array $fasthandItemPropValueBeanArray
   * @return array
   */
  public function getItemPropBeanList(array $fasthand_item_propArray, array $fasthandItemPropValueBeanArray);
  /**
   * @param int $teacherId
   * @return array
   */
  public function getItemByTeacher($teacherId);
  /**
   * @param int $event_id
   * @param string $type
   * @param int $userId
   * @param int $number
   * @param int $promotion_id
   * @param double $discount_rate
   * @return array
   */
  public function getPayPrice($event_id, $type, $userId, $number, $promotion_id, $discount_rate);
  /**
   * @param int $event_id
   * @param string $type
   * @param int $sku_id
   * @param int $userId
   * @param int $number
   * @param int $promotion_id
   * @param double $discount_rate
   * @return array
   */
  public function getSkuPayPrice($event_id, $type, $sku_id, $userId, $number, $promotion_id, $discount_rate);
  /**
   * @param int $event_id
   * @param int $userId
   * @param int $promotion_id
   * @param int $adult_num
   * @param int $child_num
   * @param int $package_num
   * @return double
   */
  public function getActivityPayPrice($event_id, $userId, $promotion_id, $adult_num, $child_num, $package_num);
  /**
   * @param int $id
   * @return int
   */
  public function getActivityPackageSizeById($id);
  /**
   * @param array $fasthand_order
   * @param array $fasthand_user
   * @param string $message
   * @return bool
   */
  public function payOrderByIncome(array $fasthand_order, array $fasthand_user, $message);
  /**
   * @param int $promotionId
   * @param int $userId
   * @param string $mobile
   * @param string $end_time
   */
  public function receivePromotion($promotionId, $userId, $mobile, $end_time);
  /**
   * @param array $fasthand_order
   * @param int $number
   * @param int $userId
   */
  public function payOrderSuccessEvent(array $fasthand_order, $number, $userId);
  /**
   * @param int $coursesId
   * @param array $fasthand_institution
   * @return array
   */
  public function getInstitutionDiscountRate($coursesId, array $fasthand_institution);
  /**
   * @param array $paramArray
   * @return array
   */
  public function ajaxCheckOrder(array $paramArray);
  /**
   * @param array $paramArray
   * @return array
   */
  public function createOrder(array $paramArray);
  /**
   * @param array $paramArray
   * @return array
   */
  public function closeOrder(array $paramArray);
  /**
   * @param int $id
   * @return array
   */
  public function mGetCoursesInfoById($id);
  /**
   * @param int $id
   * @return array
   */
  public function mGetActivityInfoById($id);
  /**
   * @param int $id
   * @return array
   */
  public function mGetInstitutionInfoById($id);
  /**
   * @param int $id
   * @return array
   */
  public function mGetInstitutionTeacherInfoById($id);
  /**
   * @param int $id
   * @return array
   */
  public function mGetTeacherInfoById($id);
  /**
   * @param int $userId
   * @return array
   */
  public function mGetPublicUserInfo($userId);
  /**
   * @return array
   */
  public function mGetNotAllowPromotionList();
  /**
   * @param string $pids
   * @return array
   */
  public function mGetItemPropDoListByPids($pids);
  /**
   * @param array $fasthand_order
   * @param int $seller_user_id
   * @return bool
   */
  public function orderEvent(array $fasthand_order, $seller_user_id);
}

class OrderServiceClient implements \Fasthand\Service\Order\OrderServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function OrderService()
  {
    $this->send_OrderService();
    $this->recv_OrderService();
  }

  public function send_OrderService()
  {
    $args = new \Fasthand\Service\Order\OrderService_OrderService_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'OrderService', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('OrderService', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_OrderService()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_OrderService_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_OrderService_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function addOrderHistory(array $fasthand_order)
  {
    $this->send_addOrderHistory($fasthand_order);
    $this->recv_addOrderHistory();
  }

  public function send_addOrderHistory(array $fasthand_order)
  {
    $args = new \Fasthand\Service\Order\OrderService_addOrderHistory_args();
    $args->fasthand_order = $fasthand_order;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addOrderHistory', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addOrderHistory', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addOrderHistory()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_addOrderHistory_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_addOrderHistory_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function updatePayNum($eventId, $eventType, $number)
  {
    $this->send_updatePayNum($eventId, $eventType, $number);
    $this->recv_updatePayNum();
  }

  public function send_updatePayNum($eventId, $eventType, $number)
  {
    $args = new \Fasthand\Service\Order\OrderService_updatePayNum_args();
    $args->eventId = $eventId;
    $args->eventType = $eventType;
    $args->number = $number;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePayNum', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePayNum', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePayNum()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_updatePayNum_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_updatePayNum_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function sendCheckSmsToSeller($event_id, $type, $order_id)
  {
    $this->send_sendCheckSmsToSeller($event_id, $type, $order_id);
    $this->recv_sendCheckSmsToSeller();
  }

  public function send_sendCheckSmsToSeller($event_id, $type, $order_id)
  {
    $args = new \Fasthand\Service\Order\OrderService_sendCheckSmsToSeller_args();
    $args->event_id = $event_id;
    $args->type = $type;
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sendCheckSmsToSeller', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sendCheckSmsToSeller', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sendCheckSmsToSeller()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_sendCheckSmsToSeller_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_sendCheckSmsToSeller_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function sendCheckSmsToStudent($userId, $order_id, $integral_num)
  {
    $this->send_sendCheckSmsToStudent($userId, $order_id, $integral_num);
    $this->recv_sendCheckSmsToStudent();
  }

  public function send_sendCheckSmsToStudent($userId, $order_id, $integral_num)
  {
    $args = new \Fasthand\Service\Order\OrderService_sendCheckSmsToStudent_args();
    $args->userId = $userId;
    $args->order_id = $order_id;
    $args->integral_num = $integral_num;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sendCheckSmsToStudent', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sendCheckSmsToStudent', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sendCheckSmsToStudent()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_sendCheckSmsToStudent_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_sendCheckSmsToStudent_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function sendPaySmsToStudent(array $fasthand_order)
  {
    $this->send_sendPaySmsToStudent($fasthand_order);
    $this->recv_sendPaySmsToStudent();
  }

  public function send_sendPaySmsToStudent(array $fasthand_order)
  {
    $args = new \Fasthand\Service\Order\OrderService_sendPaySmsToStudent_args();
    $args->fasthand_order = $fasthand_order;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sendPaySmsToStudent', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sendPaySmsToStudent', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sendPaySmsToStudent()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_sendPaySmsToStudent_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_sendPaySmsToStudent_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function sendPaySmsToSeller(array $fasthand_order, $friend_user_id)
  {
    $this->send_sendPaySmsToSeller($fasthand_order, $friend_user_id);
    $this->recv_sendPaySmsToSeller();
  }

  public function send_sendPaySmsToSeller(array $fasthand_order, $friend_user_id)
  {
    $args = new \Fasthand\Service\Order\OrderService_sendPaySmsToSeller_args();
    $args->fasthand_order = $fasthand_order;
    $args->friend_user_id = $friend_user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sendPaySmsToSeller', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sendPaySmsToSeller', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sendPaySmsToSeller()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_sendPaySmsToSeller_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_sendPaySmsToSeller_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function updatePromotionStatus($id, $status)
  {
    $this->send_updatePromotionStatus($id, $status);
    $this->recv_updatePromotionStatus();
  }

  public function send_updatePromotionStatus($id, $status)
  {
    $args = new \Fasthand\Service\Order\OrderService_updatePromotionStatus_args();
    $args->id = $id;
    $args->status = $status;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePromotionStatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePromotionStatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePromotionStatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_updatePromotionStatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_updatePromotionStatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function mUpdatePromotionUseNum($promotionId, $status)
  {
    $this->send_mUpdatePromotionUseNum($promotionId, $status);
    $this->recv_mUpdatePromotionUseNum();
  }

  public function send_mUpdatePromotionUseNum($promotionId, $status)
  {
    $args = new \Fasthand\Service\Order\OrderService_mUpdatePromotionUseNum_args();
    $args->promotionId = $promotionId;
    $args->status = $status;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mUpdatePromotionUseNum', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mUpdatePromotionUseNum', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mUpdatePromotionUseNum()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_mUpdatePromotionUseNum_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_mUpdatePromotionUseNum_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function sendNotPaySms($userId)
  {
    $this->send_sendNotPaySms($userId);
    $this->recv_sendNotPaySms();
  }

  public function send_sendNotPaySms($userId)
  {
    $args = new \Fasthand\Service\Order\OrderService_sendNotPaySms_args();
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sendNotPaySms', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sendNotPaySms', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sendNotPaySms()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_sendNotPaySms_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_sendNotPaySms_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function sendNotPayMessage($user_id, $event_id, $type)
  {
    $this->send_sendNotPayMessage($user_id, $event_id, $type);
    $this->recv_sendNotPayMessage();
  }

  public function send_sendNotPayMessage($user_id, $event_id, $type)
  {
    $args = new \Fasthand\Service\Order\OrderService_sendNotPayMessage_args();
    $args->user_id = $user_id;
    $args->event_id = $event_id;
    $args->type = $type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sendNotPayMessage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sendNotPayMessage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sendNotPayMessage()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_sendNotPayMessage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_sendNotPayMessage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function checkAllowReceiveCouponByMobile($mobile, $promotion_id, array $fasthand_item_promotion, $user_id, $amount)
  {
    $this->send_checkAllowReceiveCouponByMobile($mobile, $promotion_id, $fasthand_item_promotion, $user_id, $amount);
    return $this->recv_checkAllowReceiveCouponByMobile();
  }

  public function send_checkAllowReceiveCouponByMobile($mobile, $promotion_id, array $fasthand_item_promotion, $user_id, $amount)
  {
    $args = new \Fasthand\Service\Order\OrderService_checkAllowReceiveCouponByMobile_args();
    $args->mobile = $mobile;
    $args->promotion_id = $promotion_id;
    $args->fasthand_item_promotion = $fasthand_item_promotion;
    $args->user_id = $user_id;
    $args->amount = $amount;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'checkAllowReceiveCouponByMobile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('checkAllowReceiveCouponByMobile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_checkAllowReceiveCouponByMobile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_checkAllowReceiveCouponByMobile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_checkAllowReceiveCouponByMobile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("checkAllowReceiveCouponByMobile failed: unknown result");
  }

  public function checkAllowReceiveCouponByUserId($userId, $promotion_id, $amount)
  {
    $this->send_checkAllowReceiveCouponByUserId($userId, $promotion_id, $amount);
    return $this->recv_checkAllowReceiveCouponByUserId();
  }

  public function send_checkAllowReceiveCouponByUserId($userId, $promotion_id, $amount)
  {
    $args = new \Fasthand\Service\Order\OrderService_checkAllowReceiveCouponByUserId_args();
    $args->userId = $userId;
    $args->promotion_id = $promotion_id;
    $args->amount = $amount;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'checkAllowReceiveCouponByUserId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('checkAllowReceiveCouponByUserId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_checkAllowReceiveCouponByUserId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_checkAllowReceiveCouponByUserId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_checkAllowReceiveCouponByUserId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("checkAllowReceiveCouponByUserId failed: unknown result");
  }

  public function updatePromotionUserByRegister($mobile, $userId)
  {
    $this->send_updatePromotionUserByRegister($mobile, $userId);
    return $this->recv_updatePromotionUserByRegister();
  }

  public function send_updatePromotionUserByRegister($mobile, $userId)
  {
    $args = new \Fasthand\Service\Order\OrderService_updatePromotionUserByRegister_args();
    $args->mobile = $mobile;
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePromotionUserByRegister', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePromotionUserByRegister', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePromotionUserByRegister()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_updatePromotionUserByRegister_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_updatePromotionUserByRegister_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updatePromotionUserByRegister failed: unknown result");
  }

  public function checkPromotionStatus($my_promotion_id, $userId)
  {
    $this->send_checkPromotionStatus($my_promotion_id, $userId);
    return $this->recv_checkPromotionStatus();
  }

  public function send_checkPromotionStatus($my_promotion_id, $userId)
  {
    $args = new \Fasthand\Service\Order\OrderService_checkPromotionStatus_args();
    $args->my_promotion_id = $my_promotion_id;
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'checkPromotionStatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('checkPromotionStatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_checkPromotionStatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_checkPromotionStatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_checkPromotionStatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("checkPromotionStatus failed: unknown result");
  }

  public function checkInventoryStatus($event_id, $type, $number, array $itemOriginVo)
  {
    $this->send_checkInventoryStatus($event_id, $type, $number, $itemOriginVo);
    return $this->recv_checkInventoryStatus();
  }

  public function send_checkInventoryStatus($event_id, $type, $number, array $itemOriginVo)
  {
    $args = new \Fasthand\Service\Order\OrderService_checkInventoryStatus_args();
    $args->event_id = $event_id;
    $args->type = $type;
    $args->number = $number;
    $args->itemOriginVo = $itemOriginVo;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'checkInventoryStatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('checkInventoryStatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_checkInventoryStatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_checkInventoryStatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_checkInventoryStatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("checkInventoryStatus failed: unknown result");
  }

  public function checkSkuInventoryStatus($event_id, $event_type, $sku_id, $number)
  {
    $this->send_checkSkuInventoryStatus($event_id, $event_type, $sku_id, $number);
    return $this->recv_checkSkuInventoryStatus();
  }

  public function send_checkSkuInventoryStatus($event_id, $event_type, $sku_id, $number)
  {
    $args = new \Fasthand\Service\Order\OrderService_checkSkuInventoryStatus_args();
    $args->event_id = $event_id;
    $args->event_type = $event_type;
    $args->sku_id = $sku_id;
    $args->number = $number;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'checkSkuInventoryStatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('checkSkuInventoryStatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_checkSkuInventoryStatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_checkSkuInventoryStatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_checkSkuInventoryStatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("checkSkuInventoryStatus failed: unknown result");
  }

  public function updateInventoryNumber(array $fasthand_order, $type)
  {
    $this->send_updateInventoryNumber($fasthand_order, $type);
    return $this->recv_updateInventoryNumber();
  }

  public function send_updateInventoryNumber(array $fasthand_order, $type)
  {
    $args = new \Fasthand\Service\Order\OrderService_updateInventoryNumber_args();
    $args->fasthand_order = $fasthand_order;
    $args->type = $type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateInventoryNumber', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateInventoryNumber', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateInventoryNumber()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_updateInventoryNumber_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_updateInventoryNumber_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateInventoryNumber failed: unknown result");
  }

  public function syncPromotionToItem($event_id, $event_type, $type)
  {
    $this->send_syncPromotionToItem($event_id, $event_type, $type);
    $this->recv_syncPromotionToItem();
  }

  public function send_syncPromotionToItem($event_id, $event_type, $type)
  {
    $args = new \Fasthand\Service\Order\OrderService_syncPromotionToItem_args();
    $args->event_id = $event_id;
    $args->event_type = $event_type;
    $args->type = $type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'syncPromotionToItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('syncPromotionToItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_syncPromotionToItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_syncPromotionToItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_syncPromotionToItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function getPromotionUserId($event_type, $event_id)
  {
    $this->send_getPromotionUserId($event_type, $event_id);
    return $this->recv_getPromotionUserId();
  }

  public function send_getPromotionUserId($event_type, $event_id)
  {
    $args = new \Fasthand\Service\Order\OrderService_getPromotionUserId_args();
    $args->event_type = $event_type;
    $args->event_id = $event_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPromotionUserId', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPromotionUserId', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPromotionUserId()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getPromotionUserId_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getPromotionUserId_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPromotionUserId failed: unknown result");
  }

  public function addMessage($city_id, $client_source, $content, $effective_time, $invalid_time, $message_type, $title, $userId, $userRole, array $dataArray)
  {
    $this->send_addMessage($city_id, $client_source, $content, $effective_time, $invalid_time, $message_type, $title, $userId, $userRole, $dataArray);
    return $this->recv_addMessage();
  }

  public function send_addMessage($city_id, $client_source, $content, $effective_time, $invalid_time, $message_type, $title, $userId, $userRole, array $dataArray)
  {
    $args = new \Fasthand\Service\Order\OrderService_addMessage_args();
    $args->city_id = $city_id;
    $args->client_source = $client_source;
    $args->content = $content;
    $args->effective_time = $effective_time;
    $args->invalid_time = $invalid_time;
    $args->message_type = $message_type;
    $args->title = $title;
    $args->userId = $userId;
    $args->userRole = $userRole;
    $args->dataArray = $dataArray;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addMessage', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addMessage', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addMessage()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_addMessage_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_addMessage_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addMessage failed: unknown result");
  }

  public function getPomotionInfoByItem($event_id, $event_type)
  {
    $this->send_getPomotionInfoByItem($event_id, $event_type);
    return $this->recv_getPomotionInfoByItem();
  }

  public function send_getPomotionInfoByItem($event_id, $event_type)
  {
    $args = new \Fasthand\Service\Order\OrderService_getPomotionInfoByItem_args();
    $args->event_id = $event_id;
    $args->event_type = $event_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPomotionInfoByItem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPomotionInfoByItem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPomotionInfoByItem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getPomotionInfoByItem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getPomotionInfoByItem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPomotionInfoByItem failed: unknown result");
  }

  public function getItemSkuList($event_id, $event_type, array $extendInfoArray)
  {
    $this->send_getItemSkuList($event_id, $event_type, $extendInfoArray);
    return $this->recv_getItemSkuList();
  }

  public function send_getItemSkuList($event_id, $event_type, array $extendInfoArray)
  {
    $args = new \Fasthand\Service\Order\OrderService_getItemSkuList_args();
    $args->event_id = $event_id;
    $args->event_type = $event_type;
    $args->extendInfoArray = $extendInfoArray;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemSkuList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemSkuList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemSkuList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getItemSkuList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getItemSkuList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getItemSkuList failed: unknown result");
  }

  public function addSkuInfoByActivity(array $fasthand_activity)
  {
    $this->send_addSkuInfoByActivity($fasthand_activity);
    return $this->recv_addSkuInfoByActivity();
  }

  public function send_addSkuInfoByActivity(array $fasthand_activity)
  {
    $args = new \Fasthand\Service\Order\OrderService_addSkuInfoByActivity_args();
    $args->fasthand_activity = $fasthand_activity;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addSkuInfoByActivity', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addSkuInfoByActivity', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addSkuInfoByActivity()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_addSkuInfoByActivity_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_addSkuInfoByActivity_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addSkuInfoByActivity failed: unknown result");
  }

  public function getOrderIntegralNum($userId)
  {
    $this->send_getOrderIntegralNum($userId);
    return $this->recv_getOrderIntegralNum();
  }

  public function send_getOrderIntegralNum($userId)
  {
    $args = new \Fasthand\Service\Order\OrderService_getOrderIntegralNum_args();
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getOrderIntegralNum', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getOrderIntegralNum', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getOrderIntegralNum()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getOrderIntegralNum_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getOrderIntegralNum_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getOrderIntegralNum failed: unknown result");
  }

  public function getOrderIntegralConvertPrice($userId, $item_price, $integral_num)
  {
    $this->send_getOrderIntegralConvertPrice($userId, $item_price, $integral_num);
    return $this->recv_getOrderIntegralConvertPrice();
  }

  public function send_getOrderIntegralConvertPrice($userId, $item_price, $integral_num)
  {
    $args = new \Fasthand\Service\Order\OrderService_getOrderIntegralConvertPrice_args();
    $args->userId = $userId;
    $args->item_price = $item_price;
    $args->integral_num = $integral_num;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getOrderIntegralConvertPrice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getOrderIntegralConvertPrice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getOrderIntegralConvertPrice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getOrderIntegralConvertPrice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getOrderIntegralConvertPrice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getOrderIntegralConvertPrice failed: unknown result");
  }

  public function transcodeCertificatesToDescribes($certificates)
  {
    $this->send_transcodeCertificatesToDescribes($certificates);
    return $this->recv_transcodeCertificatesToDescribes();
  }

  public function send_transcodeCertificatesToDescribes($certificates)
  {
    $args = new \Fasthand\Service\Order\OrderService_transcodeCertificatesToDescribes_args();
    $args->certificates = $certificates;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'transcodeCertificatesToDescribes', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('transcodeCertificatesToDescribes', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_transcodeCertificatesToDescribes()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_transcodeCertificatesToDescribes_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_transcodeCertificatesToDescribes_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("transcodeCertificatesToDescribes failed: unknown result");
  }

  public function getPromotionPrice($type, $price, $amount)
  {
    $this->send_getPromotionPrice($type, $price, $amount);
    return $this->recv_getPromotionPrice();
  }

  public function send_getPromotionPrice($type, $price, $amount)
  {
    $args = new \Fasthand\Service\Order\OrderService_getPromotionPrice_args();
    $args->type = $type;
    $args->price = $price;
    $args->amount = $amount;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPromotionPrice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPromotionPrice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPromotionPrice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getPromotionPrice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getPromotionPrice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPromotionPrice failed: unknown result");
  }

  public function getPriceByDiscountRate($type, $promotionPrice, $amount)
  {
    $this->send_getPriceByDiscountRate($type, $promotionPrice, $amount);
    return $this->recv_getPriceByDiscountRate();
  }

  public function send_getPriceByDiscountRate($type, $promotionPrice, $amount)
  {
    $args = new \Fasthand\Service\Order\OrderService_getPriceByDiscountRate_args();
    $args->type = $type;
    $args->promotionPrice = $promotionPrice;
    $args->amount = $amount;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPriceByDiscountRate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPriceByDiscountRate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPriceByDiscountRate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getPriceByDiscountRate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getPriceByDiscountRate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPriceByDiscountRate failed: unknown result");
  }

  public function getPropValueByProps($props, $pids, $vids)
  {
    $this->send_getPropValueByProps($props, $pids, $vids);
    $this->recv_getPropValueByProps();
  }

  public function send_getPropValueByProps($props, $pids, $vids)
  {
    $args = new \Fasthand\Service\Order\OrderService_getPropValueByProps_args();
    $args->props = $props;
    $args->pids = $pids;
    $args->vids = $vids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPropValueByProps', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPropValueByProps', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPropValueByProps()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getPropValueByProps_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getPropValueByProps_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function getSkuPropValues($sku_id)
  {
    $this->send_getSkuPropValues($sku_id);
    return $this->recv_getSkuPropValues();
  }

  public function send_getSkuPropValues($sku_id)
  {
    $args = new \Fasthand\Service\Order\OrderService_getSkuPropValues_args();
    $args->sku_id = $sku_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSkuPropValues', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSkuPropValues', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSkuPropValues()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getSkuPropValues_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getSkuPropValues_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSkuPropValues failed: unknown result");
  }

  public function createItemSnapshotObject(array $request, $seller_id, $seller_user_id)
  {
    $this->send_createItemSnapshotObject($request, $seller_id, $seller_user_id);
    return $this->recv_createItemSnapshotObject();
  }

  public function send_createItemSnapshotObject(array $request, $seller_id, $seller_user_id)
  {
    $args = new \Fasthand\Service\Order\OrderService_createItemSnapshotObject_args();
    $args->request = $request;
    $args->seller_id = $seller_id;
    $args->seller_user_id = $seller_user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'createItemSnapshotObject', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('createItemSnapshotObject', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_createItemSnapshotObject()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_createItemSnapshotObject_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_createItemSnapshotObject_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("createItemSnapshotObject failed: unknown result");
  }

  public function updateActivityProps($id, $sku_id, $properties)
  {
    $this->send_updateActivityProps($id, $sku_id, $properties);
    return $this->recv_updateActivityProps();
  }

  public function send_updateActivityProps($id, $sku_id, $properties)
  {
    $args = new \Fasthand\Service\Order\OrderService_updateActivityProps_args();
    $args->id = $id;
    $args->sku_id = $sku_id;
    $args->properties = $properties;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateActivityProps', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateActivityProps', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateActivityProps()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_updateActivityProps_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_updateActivityProps_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("updateActivityProps failed: unknown result");
  }

  public function createPropsBySkus(array $fasthand_item_skuArray, $addProperties)
  {
    $this->send_createPropsBySkus($fasthand_item_skuArray, $addProperties);
    return $this->recv_createPropsBySkus();
  }

  public function send_createPropsBySkus(array $fasthand_item_skuArray, $addProperties)
  {
    $args = new \Fasthand\Service\Order\OrderService_createPropsBySkus_args();
    $args->fasthand_item_skuArray = $fasthand_item_skuArray;
    $args->addProperties = $addProperties;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'createPropsBySkus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('createPropsBySkus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_createPropsBySkus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_createPropsBySkus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_createPropsBySkus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("createPropsBySkus failed: unknown result");
  }

  public function checkPromotionReceiveStatus($userId, $event_id, $event_type)
  {
    $this->send_checkPromotionReceiveStatus($userId, $event_id, $event_type);
    return $this->recv_checkPromotionReceiveStatus();
  }

  public function send_checkPromotionReceiveStatus($userId, $event_id, $event_type)
  {
    $args = new \Fasthand\Service\Order\OrderService_checkPromotionReceiveStatus_args();
    $args->userId = $userId;
    $args->event_id = $event_id;
    $args->event_type = $event_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'checkPromotionReceiveStatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('checkPromotionReceiveStatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_checkPromotionReceiveStatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_checkPromotionReceiveStatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_checkPromotionReceiveStatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("checkPromotionReceiveStatus failed: unknown result");
  }

  public function addConsumIncomeRecord($invite_code, $userId, $pay_amount, $event_id)
  {
    $this->send_addConsumIncomeRecord($invite_code, $userId, $pay_amount, $event_id);
    return $this->recv_addConsumIncomeRecord();
  }

  public function send_addConsumIncomeRecord($invite_code, $userId, $pay_amount, $event_id)
  {
    $args = new \Fasthand\Service\Order\OrderService_addConsumIncomeRecord_args();
    $args->invite_code = $invite_code;
    $args->userId = $userId;
    $args->pay_amount = $pay_amount;
    $args->event_id = $event_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addConsumIncomeRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addConsumIncomeRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addConsumIncomeRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_addConsumIncomeRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_addConsumIncomeRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addConsumIncomeRecord failed: unknown result");
  }

  public function checkInviteCodeStatus($invite_code, $userId)
  {
    $this->send_checkInviteCodeStatus($invite_code, $userId);
    return $this->recv_checkInviteCodeStatus();
  }

  public function send_checkInviteCodeStatus($invite_code, $userId)
  {
    $args = new \Fasthand\Service\Order\OrderService_checkInviteCodeStatus_args();
    $args->invite_code = $invite_code;
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'checkInviteCodeStatus', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('checkInviteCodeStatus', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_checkInviteCodeStatus()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_checkInviteCodeStatus_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_checkInviteCodeStatus_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("checkInviteCodeStatus failed: unknown result");
  }

  public function addMyIncomeRecord($userId, $amount, $title, $type, $origin_user_id, $status, $event_id, $event_type, $action, array $fasthand_user)
  {
    $this->send_addMyIncomeRecord($userId, $amount, $title, $type, $origin_user_id, $status, $event_id, $event_type, $action, $fasthand_user);
    return $this->recv_addMyIncomeRecord();
  }

  public function send_addMyIncomeRecord($userId, $amount, $title, $type, $origin_user_id, $status, $event_id, $event_type, $action, array $fasthand_user)
  {
    $args = new \Fasthand\Service\Order\OrderService_addMyIncomeRecord_args();
    $args->userId = $userId;
    $args->amount = $amount;
    $args->title = $title;
    $args->type = $type;
    $args->origin_user_id = $origin_user_id;
    $args->status = $status;
    $args->event_id = $event_id;
    $args->event_type = $event_type;
    $args->action = $action;
    $args->fasthand_user = $fasthand_user;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'addMyIncomeRecord', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('addMyIncomeRecord', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_addMyIncomeRecord()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_addMyIncomeRecord_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_addMyIncomeRecord_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("addMyIncomeRecord failed: unknown result");
  }

  public function createConsumCode($event_id, $event_type)
  {
    $this->send_createConsumCode($event_id, $event_type);
    return $this->recv_createConsumCode();
  }

  public function send_createConsumCode($event_id, $event_type)
  {
    $args = new \Fasthand\Service\Order\OrderService_createConsumCode_args();
    $args->event_id = $event_id;
    $args->event_type = $event_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'createConsumCode', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('createConsumCode', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_createConsumCode()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_createConsumCode_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_createConsumCode_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("createConsumCode failed: unknown result");
  }

  public function getPromotionList($event_id, $event_type, $userId, $notType, $is_allow_promotion)
  {
    $this->send_getPromotionList($event_id, $event_type, $userId, $notType, $is_allow_promotion);
    return $this->recv_getPromotionList();
  }

  public function send_getPromotionList($event_id, $event_type, $userId, $notType, $is_allow_promotion)
  {
    $args = new \Fasthand\Service\Order\OrderService_getPromotionList_args();
    $args->event_id = $event_id;
    $args->event_type = $event_type;
    $args->userId = $userId;
    $args->notType = $notType;
    $args->is_allow_promotion = $is_allow_promotion;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPromotionList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPromotionList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPromotionList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getPromotionList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getPromotionList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPromotionList failed: unknown result");
  }

  public function getMaxBuyNum($event_id, $event_type, $max_buy_num, $userId)
  {
    $this->send_getMaxBuyNum($event_id, $event_type, $max_buy_num, $userId);
    return $this->recv_getMaxBuyNum();
  }

  public function send_getMaxBuyNum($event_id, $event_type, $max_buy_num, $userId)
  {
    $args = new \Fasthand\Service\Order\OrderService_getMaxBuyNum_args();
    $args->event_id = $event_id;
    $args->event_type = $event_type;
    $args->max_buy_num = $max_buy_num;
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getMaxBuyNum', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getMaxBuyNum', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getMaxBuyNum()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getMaxBuyNum_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getMaxBuyNum_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getMaxBuyNum failed: unknown result");
  }

  public function checkUserMaxBuyNum(array $itemOriginVo, $event_id, $event_type, $userId, $number)
  {
    $this->send_checkUserMaxBuyNum($itemOriginVo, $event_id, $event_type, $userId, $number);
    return $this->recv_checkUserMaxBuyNum();
  }

  public function send_checkUserMaxBuyNum(array $itemOriginVo, $event_id, $event_type, $userId, $number)
  {
    $args = new \Fasthand\Service\Order\OrderService_checkUserMaxBuyNum_args();
    $args->itemOriginVo = $itemOriginVo;
    $args->event_id = $event_id;
    $args->event_type = $event_type;
    $args->userId = $userId;
    $args->number = $number;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'checkUserMaxBuyNum', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('checkUserMaxBuyNum', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_checkUserMaxBuyNum()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_checkUserMaxBuyNum_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_checkUserMaxBuyNum_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("checkUserMaxBuyNum failed: unknown result");
  }

  public function getItemOriginVo($event_id, $type)
  {
    $this->send_getItemOriginVo($event_id, $type);
    return $this->recv_getItemOriginVo();
  }

  public function send_getItemOriginVo($event_id, $type)
  {
    $args = new \Fasthand\Service\Order\OrderService_getItemOriginVo_args();
    $args->event_id = $event_id;
    $args->type = $type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemOriginVo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemOriginVo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemOriginVo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getItemOriginVo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getItemOriginVo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getItemOriginVo failed: unknown result");
  }

  public function checkIsDiscount(array $fasthand_item_promotion, $pid)
  {
    $this->send_checkIsDiscount($fasthand_item_promotion, $pid);
    return $this->recv_checkIsDiscount();
  }

  public function send_checkIsDiscount(array $fasthand_item_promotion, $pid)
  {
    $args = new \Fasthand\Service\Order\OrderService_checkIsDiscount_args();
    $args->fasthand_item_promotion = $fasthand_item_promotion;
    $args->pid = $pid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'checkIsDiscount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('checkIsDiscount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_checkIsDiscount()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_checkIsDiscount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_checkIsDiscount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("checkIsDiscount failed: unknown result");
  }

  public function getSkuInfoById($sku_id)
  {
    $this->send_getSkuInfoById($sku_id);
    return $this->recv_getSkuInfoById();
  }

  public function send_getSkuInfoById($sku_id)
  {
    $args = new \Fasthand\Service\Order\OrderService_getSkuInfoById_args();
    $args->sku_id = $sku_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSkuInfoById', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSkuInfoById', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSkuInfoById()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getSkuInfoById_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getSkuInfoById_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSkuInfoById failed: unknown result");
  }

  public function getItemByCourses($coursesId, $userId)
  {
    $this->send_getItemByCourses($coursesId, $userId);
    return $this->recv_getItemByCourses();
  }

  public function send_getItemByCourses($coursesId, $userId)
  {
    $args = new \Fasthand\Service\Order\OrderService_getItemByCourses_args();
    $args->coursesId = $coursesId;
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemByCourses', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemByCourses', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemByCourses()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getItemByCourses_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getItemByCourses_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getItemByCourses failed: unknown result");
  }

  public function getItemByActivity($activityId, $userId)
  {
    $this->send_getItemByActivity($activityId, $userId);
    return $this->recv_getItemByActivity();
  }

  public function send_getItemByActivity($activityId, $userId)
  {
    $args = new \Fasthand\Service\Order\OrderService_getItemByActivity_args();
    $args->activityId = $activityId;
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemByActivity', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemByActivity', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemByActivity()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getItemByActivity_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getItemByActivity_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getItemByActivity failed: unknown result");
  }

  public function getItemAndPropByActivity($activityId, $userId)
  {
    $this->send_getItemAndPropByActivity($activityId, $userId);
    return $this->recv_getItemAndPropByActivity();
  }

  public function send_getItemAndPropByActivity($activityId, $userId)
  {
    $args = new \Fasthand\Service\Order\OrderService_getItemAndPropByActivity_args();
    $args->activityId = $activityId;
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemAndPropByActivity', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemAndPropByActivity', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemAndPropByActivity()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getItemAndPropByActivity_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getItemAndPropByActivity_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getItemAndPropByActivity failed: unknown result");
  }

  public function getItemPropValueListByVids($vids, array $pidNameArray)
  {
    $this->send_getItemPropValueListByVids($vids, $pidNameArray);
    return $this->recv_getItemPropValueListByVids();
  }

  public function send_getItemPropValueListByVids($vids, array $pidNameArray)
  {
    $args = new \Fasthand\Service\Order\OrderService_getItemPropValueListByVids_args();
    $args->vids = $vids;
    $args->pidNameArray = $pidNameArray;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemPropValueListByVids', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemPropValueListByVids', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemPropValueListByVids()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getItemPropValueListByVids_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getItemPropValueListByVids_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getItemPropValueListByVids failed: unknown result");
  }

  public function getItemPropBeanList(array $fasthand_item_propArray, array $fasthandItemPropValueBeanArray)
  {
    $this->send_getItemPropBeanList($fasthand_item_propArray, $fasthandItemPropValueBeanArray);
    return $this->recv_getItemPropBeanList();
  }

  public function send_getItemPropBeanList(array $fasthand_item_propArray, array $fasthandItemPropValueBeanArray)
  {
    $args = new \Fasthand\Service\Order\OrderService_getItemPropBeanList_args();
    $args->fasthand_item_propArray = $fasthand_item_propArray;
    $args->fasthandItemPropValueBeanArray = $fasthandItemPropValueBeanArray;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemPropBeanList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemPropBeanList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemPropBeanList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getItemPropBeanList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getItemPropBeanList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getItemPropBeanList failed: unknown result");
  }

  public function getItemByTeacher($teacherId)
  {
    $this->send_getItemByTeacher($teacherId);
    return $this->recv_getItemByTeacher();
  }

  public function send_getItemByTeacher($teacherId)
  {
    $args = new \Fasthand\Service\Order\OrderService_getItemByTeacher_args();
    $args->teacherId = $teacherId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemByTeacher', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemByTeacher', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemByTeacher()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getItemByTeacher_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getItemByTeacher_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getItemByTeacher failed: unknown result");
  }

  public function getPayPrice($event_id, $type, $userId, $number, $promotion_id, $discount_rate)
  {
    $this->send_getPayPrice($event_id, $type, $userId, $number, $promotion_id, $discount_rate);
    return $this->recv_getPayPrice();
  }

  public function send_getPayPrice($event_id, $type, $userId, $number, $promotion_id, $discount_rate)
  {
    $args = new \Fasthand\Service\Order\OrderService_getPayPrice_args();
    $args->event_id = $event_id;
    $args->type = $type;
    $args->userId = $userId;
    $args->number = $number;
    $args->promotion_id = $promotion_id;
    $args->discount_rate = $discount_rate;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPayPrice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPayPrice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPayPrice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getPayPrice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getPayPrice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getPayPrice failed: unknown result");
  }

  public function getSkuPayPrice($event_id, $type, $sku_id, $userId, $number, $promotion_id, $discount_rate)
  {
    $this->send_getSkuPayPrice($event_id, $type, $sku_id, $userId, $number, $promotion_id, $discount_rate);
    return $this->recv_getSkuPayPrice();
  }

  public function send_getSkuPayPrice($event_id, $type, $sku_id, $userId, $number, $promotion_id, $discount_rate)
  {
    $args = new \Fasthand\Service\Order\OrderService_getSkuPayPrice_args();
    $args->event_id = $event_id;
    $args->type = $type;
    $args->sku_id = $sku_id;
    $args->userId = $userId;
    $args->number = $number;
    $args->promotion_id = $promotion_id;
    $args->discount_rate = $discount_rate;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSkuPayPrice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSkuPayPrice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSkuPayPrice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getSkuPayPrice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getSkuPayPrice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getSkuPayPrice failed: unknown result");
  }

  public function getActivityPayPrice($event_id, $userId, $promotion_id, $adult_num, $child_num, $package_num)
  {
    $this->send_getActivityPayPrice($event_id, $userId, $promotion_id, $adult_num, $child_num, $package_num);
    return $this->recv_getActivityPayPrice();
  }

  public function send_getActivityPayPrice($event_id, $userId, $promotion_id, $adult_num, $child_num, $package_num)
  {
    $args = new \Fasthand\Service\Order\OrderService_getActivityPayPrice_args();
    $args->event_id = $event_id;
    $args->userId = $userId;
    $args->promotion_id = $promotion_id;
    $args->adult_num = $adult_num;
    $args->child_num = $child_num;
    $args->package_num = $package_num;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getActivityPayPrice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getActivityPayPrice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getActivityPayPrice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getActivityPayPrice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getActivityPayPrice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getActivityPayPrice failed: unknown result");
  }

  public function getActivityPackageSizeById($id)
  {
    $this->send_getActivityPackageSizeById($id);
    return $this->recv_getActivityPackageSizeById();
  }

  public function send_getActivityPackageSizeById($id)
  {
    $args = new \Fasthand\Service\Order\OrderService_getActivityPackageSizeById_args();
    $args->id = $id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getActivityPackageSizeById', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getActivityPackageSizeById', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getActivityPackageSizeById()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getActivityPackageSizeById_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getActivityPackageSizeById_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getActivityPackageSizeById failed: unknown result");
  }

  public function payOrderByIncome(array $fasthand_order, array $fasthand_user, $message)
  {
    $this->send_payOrderByIncome($fasthand_order, $fasthand_user, $message);
    return $this->recv_payOrderByIncome();
  }

  public function send_payOrderByIncome(array $fasthand_order, array $fasthand_user, $message)
  {
    $args = new \Fasthand\Service\Order\OrderService_payOrderByIncome_args();
    $args->fasthand_order = $fasthand_order;
    $args->fasthand_user = $fasthand_user;
    $args->message = $message;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'payOrderByIncome', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('payOrderByIncome', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_payOrderByIncome()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_payOrderByIncome_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_payOrderByIncome_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("payOrderByIncome failed: unknown result");
  }

  public function receivePromotion($promotionId, $userId, $mobile, $end_time)
  {
    $this->send_receivePromotion($promotionId, $userId, $mobile, $end_time);
    $this->recv_receivePromotion();
  }

  public function send_receivePromotion($promotionId, $userId, $mobile, $end_time)
  {
    $args = new \Fasthand\Service\Order\OrderService_receivePromotion_args();
    $args->promotionId = $promotionId;
    $args->userId = $userId;
    $args->mobile = $mobile;
    $args->end_time = $end_time;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'receivePromotion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('receivePromotion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_receivePromotion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_receivePromotion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_receivePromotion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function payOrderSuccessEvent(array $fasthand_order, $number, $userId)
  {
    $this->send_payOrderSuccessEvent($fasthand_order, $number, $userId);
    $this->recv_payOrderSuccessEvent();
  }

  public function send_payOrderSuccessEvent(array $fasthand_order, $number, $userId)
  {
    $args = new \Fasthand\Service\Order\OrderService_payOrderSuccessEvent_args();
    $args->fasthand_order = $fasthand_order;
    $args->number = $number;
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'payOrderSuccessEvent', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('payOrderSuccessEvent', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_payOrderSuccessEvent()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_payOrderSuccessEvent_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_payOrderSuccessEvent_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function getInstitutionDiscountRate($coursesId, array $fasthand_institution)
  {
    $this->send_getInstitutionDiscountRate($coursesId, $fasthand_institution);
    return $this->recv_getInstitutionDiscountRate();
  }

  public function send_getInstitutionDiscountRate($coursesId, array $fasthand_institution)
  {
    $args = new \Fasthand\Service\Order\OrderService_getInstitutionDiscountRate_args();
    $args->coursesId = $coursesId;
    $args->fasthand_institution = $fasthand_institution;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getInstitutionDiscountRate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getInstitutionDiscountRate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getInstitutionDiscountRate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_getInstitutionDiscountRate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_getInstitutionDiscountRate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getInstitutionDiscountRate failed: unknown result");
  }

  public function ajaxCheckOrder(array $paramArray)
  {
    $this->send_ajaxCheckOrder($paramArray);
    return $this->recv_ajaxCheckOrder();
  }

  public function send_ajaxCheckOrder(array $paramArray)
  {
    $args = new \Fasthand\Service\Order\OrderService_ajaxCheckOrder_args();
    $args->paramArray = $paramArray;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ajaxCheckOrder', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ajaxCheckOrder', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ajaxCheckOrder()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_ajaxCheckOrder_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_ajaxCheckOrder_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("ajaxCheckOrder failed: unknown result");
  }

  public function createOrder(array $paramArray)
  {
    $this->send_createOrder($paramArray);
    return $this->recv_createOrder();
  }

  public function send_createOrder(array $paramArray)
  {
    $args = new \Fasthand\Service\Order\OrderService_createOrder_args();
    $args->paramArray = $paramArray;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'createOrder', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('createOrder', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_createOrder()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_createOrder_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_createOrder_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("createOrder failed: unknown result");
  }

  public function closeOrder(array $paramArray)
  {
    $this->send_closeOrder($paramArray);
    return $this->recv_closeOrder();
  }

  public function send_closeOrder(array $paramArray)
  {
    $args = new \Fasthand\Service\Order\OrderService_closeOrder_args();
    $args->paramArray = $paramArray;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'closeOrder', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('closeOrder', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_closeOrder()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_closeOrder_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_closeOrder_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("closeOrder failed: unknown result");
  }

  public function mGetCoursesInfoById($id)
  {
    $this->send_mGetCoursesInfoById($id);
    return $this->recv_mGetCoursesInfoById();
  }

  public function send_mGetCoursesInfoById($id)
  {
    $args = new \Fasthand\Service\Order\OrderService_mGetCoursesInfoById_args();
    $args->id = $id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mGetCoursesInfoById', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mGetCoursesInfoById', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mGetCoursesInfoById()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_mGetCoursesInfoById_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_mGetCoursesInfoById_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("mGetCoursesInfoById failed: unknown result");
  }

  public function mGetActivityInfoById($id)
  {
    $this->send_mGetActivityInfoById($id);
    return $this->recv_mGetActivityInfoById();
  }

  public function send_mGetActivityInfoById($id)
  {
    $args = new \Fasthand\Service\Order\OrderService_mGetActivityInfoById_args();
    $args->id = $id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mGetActivityInfoById', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mGetActivityInfoById', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mGetActivityInfoById()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_mGetActivityInfoById_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_mGetActivityInfoById_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("mGetActivityInfoById failed: unknown result");
  }

  public function mGetInstitutionInfoById($id)
  {
    $this->send_mGetInstitutionInfoById($id);
    return $this->recv_mGetInstitutionInfoById();
  }

  public function send_mGetInstitutionInfoById($id)
  {
    $args = new \Fasthand\Service\Order\OrderService_mGetInstitutionInfoById_args();
    $args->id = $id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mGetInstitutionInfoById', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mGetInstitutionInfoById', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mGetInstitutionInfoById()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_mGetInstitutionInfoById_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_mGetInstitutionInfoById_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("mGetInstitutionInfoById failed: unknown result");
  }

  public function mGetInstitutionTeacherInfoById($id)
  {
    $this->send_mGetInstitutionTeacherInfoById($id);
    return $this->recv_mGetInstitutionTeacherInfoById();
  }

  public function send_mGetInstitutionTeacherInfoById($id)
  {
    $args = new \Fasthand\Service\Order\OrderService_mGetInstitutionTeacherInfoById_args();
    $args->id = $id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mGetInstitutionTeacherInfoById', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mGetInstitutionTeacherInfoById', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mGetInstitutionTeacherInfoById()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_mGetInstitutionTeacherInfoById_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_mGetInstitutionTeacherInfoById_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("mGetInstitutionTeacherInfoById failed: unknown result");
  }

  public function mGetTeacherInfoById($id)
  {
    $this->send_mGetTeacherInfoById($id);
    return $this->recv_mGetTeacherInfoById();
  }

  public function send_mGetTeacherInfoById($id)
  {
    $args = new \Fasthand\Service\Order\OrderService_mGetTeacherInfoById_args();
    $args->id = $id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mGetTeacherInfoById', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mGetTeacherInfoById', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mGetTeacherInfoById()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_mGetTeacherInfoById_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_mGetTeacherInfoById_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("mGetTeacherInfoById failed: unknown result");
  }

  public function mGetPublicUserInfo($userId)
  {
    $this->send_mGetPublicUserInfo($userId);
    return $this->recv_mGetPublicUserInfo();
  }

  public function send_mGetPublicUserInfo($userId)
  {
    $args = new \Fasthand\Service\Order\OrderService_mGetPublicUserInfo_args();
    $args->userId = $userId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mGetPublicUserInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mGetPublicUserInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mGetPublicUserInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_mGetPublicUserInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_mGetPublicUserInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("mGetPublicUserInfo failed: unknown result");
  }

  public function mGetNotAllowPromotionList()
  {
    $this->send_mGetNotAllowPromotionList();
    return $this->recv_mGetNotAllowPromotionList();
  }

  public function send_mGetNotAllowPromotionList()
  {
    $args = new \Fasthand\Service\Order\OrderService_mGetNotAllowPromotionList_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mGetNotAllowPromotionList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mGetNotAllowPromotionList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mGetNotAllowPromotionList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_mGetNotAllowPromotionList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_mGetNotAllowPromotionList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("mGetNotAllowPromotionList failed: unknown result");
  }

  public function mGetItemPropDoListByPids($pids)
  {
    $this->send_mGetItemPropDoListByPids($pids);
    return $this->recv_mGetItemPropDoListByPids();
  }

  public function send_mGetItemPropDoListByPids($pids)
  {
    $args = new \Fasthand\Service\Order\OrderService_mGetItemPropDoListByPids_args();
    $args->pids = $pids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mGetItemPropDoListByPids', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mGetItemPropDoListByPids', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mGetItemPropDoListByPids()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_mGetItemPropDoListByPids_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_mGetItemPropDoListByPids_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("mGetItemPropDoListByPids failed: unknown result");
  }

  public function orderEvent(array $fasthand_order, $seller_user_id)
  {
    $this->send_orderEvent($fasthand_order, $seller_user_id);
    return $this->recv_orderEvent();
  }

  public function send_orderEvent(array $fasthand_order, $seller_user_id)
  {
    $args = new \Fasthand\Service\Order\OrderService_orderEvent_args();
    $args->fasthand_order = $fasthand_order;
    $args->seller_user_id = $seller_user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'orderEvent', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('orderEvent', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_orderEvent()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Fasthand\Service\Order\OrderService_orderEvent_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Fasthand\Service\Order\OrderService_orderEvent_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("orderEvent failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class OrderService_OrderService_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OrderService_OrderService_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_OrderService_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_OrderService_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OrderService_OrderService_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_OrderService_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_addOrderHistory_args {
  static $_TSPEC;

  /**
   * @var array
   */
  public $fasthand_order = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fasthand_order',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fasthand_order'])) {
        $this->fasthand_order = $vals['fasthand_order'];
      }
    }
  }

  public function getName() {
    return 'OrderService_addOrderHistory_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->fasthand_order = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = '';
              $val6 = '';
              $xfer += $input->readString($key5);
              $xfer += $input->readString($val6);
              $this->fasthand_order[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_addOrderHistory_args');
    if ($this->fasthand_order !== null) {
      if (!is_array($this->fasthand_order)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fasthand_order', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->fasthand_order));
        {
          foreach ($this->fasthand_order as $kiter7 => $viter8)
          {
            $xfer += $output->writeString($kiter7);
            $xfer += $output->writeString($viter8);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_addOrderHistory_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OrderService_addOrderHistory_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_addOrderHistory_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_updatePayNum_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $eventId = null;
  /**
   * @var string
   */
  public $eventType = null;
  /**
   * @var int
   */
  public $number = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'eventId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'eventType',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'number',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['eventId'])) {
        $this->eventId = $vals['eventId'];
      }
      if (isset($vals['eventType'])) {
        $this->eventType = $vals['eventType'];
      }
      if (isset($vals['number'])) {
        $this->number = $vals['number'];
      }
    }
  }

  public function getName() {
    return 'OrderService_updatePayNum_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->eventId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->eventType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_updatePayNum_args');
    if ($this->eventId !== null) {
      $xfer += $output->writeFieldBegin('eventId', TType::I32, 1);
      $xfer += $output->writeI32($this->eventId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eventType !== null) {
      $xfer += $output->writeFieldBegin('eventType', TType::STRING, 2);
      $xfer += $output->writeString($this->eventType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number !== null) {
      $xfer += $output->writeFieldBegin('number', TType::I32, 3);
      $xfer += $output->writeI32($this->number);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_updatePayNum_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OrderService_updatePayNum_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_updatePayNum_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_sendCheckSmsToSeller_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $event_id = null;
  /**
   * @var string
   */
  public $type = null;
  /**
   * @var int
   */
  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'event_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'order_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['event_id'])) {
        $this->event_id = $vals['event_id'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['order_id'])) {
        $this->order_id = $vals['order_id'];
      }
    }
  }

  public function getName() {
    return 'OrderService_sendCheckSmsToSeller_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->event_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->order_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_sendCheckSmsToSeller_args');
    if ($this->event_id !== null) {
      $xfer += $output->writeFieldBegin('event_id', TType::I32, 1);
      $xfer += $output->writeI32($this->event_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 2);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_id !== null) {
      $xfer += $output->writeFieldBegin('order_id', TType::I32, 3);
      $xfer += $output->writeI32($this->order_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_sendCheckSmsToSeller_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OrderService_sendCheckSmsToSeller_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_sendCheckSmsToSeller_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_sendCheckSmsToStudent_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $order_id = null;
  /**
   * @var int
   */
  public $integral_num = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'integral_num',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['order_id'])) {
        $this->order_id = $vals['order_id'];
      }
      if (isset($vals['integral_num'])) {
        $this->integral_num = $vals['integral_num'];
      }
    }
  }

  public function getName() {
    return 'OrderService_sendCheckSmsToStudent_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->order_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->integral_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_sendCheckSmsToStudent_args');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order_id !== null) {
      $xfer += $output->writeFieldBegin('order_id', TType::I32, 2);
      $xfer += $output->writeI32($this->order_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integral_num !== null) {
      $xfer += $output->writeFieldBegin('integral_num', TType::I32, 3);
      $xfer += $output->writeI32($this->integral_num);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_sendCheckSmsToStudent_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OrderService_sendCheckSmsToStudent_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_sendCheckSmsToStudent_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_sendPaySmsToStudent_args {
  static $_TSPEC;

  /**
   * @var array
   */
  public $fasthand_order = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fasthand_order',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fasthand_order'])) {
        $this->fasthand_order = $vals['fasthand_order'];
      }
    }
  }

  public function getName() {
    return 'OrderService_sendPaySmsToStudent_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->fasthand_order = array();
            $_size9 = 0;
            $_ktype10 = 0;
            $_vtype11 = 0;
            $xfer += $input->readMapBegin($_ktype10, $_vtype11, $_size9);
            for ($_i13 = 0; $_i13 < $_size9; ++$_i13)
            {
              $key14 = '';
              $val15 = '';
              $xfer += $input->readString($key14);
              $xfer += $input->readString($val15);
              $this->fasthand_order[$key14] = $val15;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_sendPaySmsToStudent_args');
    if ($this->fasthand_order !== null) {
      if (!is_array($this->fasthand_order)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fasthand_order', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->fasthand_order));
        {
          foreach ($this->fasthand_order as $kiter16 => $viter17)
          {
            $xfer += $output->writeString($kiter16);
            $xfer += $output->writeString($viter17);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_sendPaySmsToStudent_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OrderService_sendPaySmsToStudent_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_sendPaySmsToStudent_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_sendPaySmsToSeller_args {
  static $_TSPEC;

  /**
   * @var array
   */
  public $fasthand_order = null;
  /**
   * @var int
   */
  public $friend_user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fasthand_order',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'friend_user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fasthand_order'])) {
        $this->fasthand_order = $vals['fasthand_order'];
      }
      if (isset($vals['friend_user_id'])) {
        $this->friend_user_id = $vals['friend_user_id'];
      }
    }
  }

  public function getName() {
    return 'OrderService_sendPaySmsToSeller_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->fasthand_order = array();
            $_size18 = 0;
            $_ktype19 = 0;
            $_vtype20 = 0;
            $xfer += $input->readMapBegin($_ktype19, $_vtype20, $_size18);
            for ($_i22 = 0; $_i22 < $_size18; ++$_i22)
            {
              $key23 = '';
              $val24 = '';
              $xfer += $input->readString($key23);
              $xfer += $input->readString($val24);
              $this->fasthand_order[$key23] = $val24;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->friend_user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_sendPaySmsToSeller_args');
    if ($this->fasthand_order !== null) {
      if (!is_array($this->fasthand_order)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fasthand_order', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->fasthand_order));
        {
          foreach ($this->fasthand_order as $kiter25 => $viter26)
          {
            $xfer += $output->writeString($kiter25);
            $xfer += $output->writeString($viter26);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->friend_user_id !== null) {
      $xfer += $output->writeFieldBegin('friend_user_id', TType::I32, 2);
      $xfer += $output->writeI32($this->friend_user_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_sendPaySmsToSeller_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OrderService_sendPaySmsToSeller_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_sendPaySmsToSeller_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_updatePromotionStatus_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'OrderService_updatePromotionStatus_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_updatePromotionStatus_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 2);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_updatePromotionStatus_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OrderService_updatePromotionStatus_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_updatePromotionStatus_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_mUpdatePromotionUseNum_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $promotionId = null;
  /**
   * @var int
   */
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'promotionId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['promotionId'])) {
        $this->promotionId = $vals['promotionId'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'OrderService_mUpdatePromotionUseNum_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->promotionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_mUpdatePromotionUseNum_args');
    if ($this->promotionId !== null) {
      $xfer += $output->writeFieldBegin('promotionId', TType::I32, 1);
      $xfer += $output->writeI32($this->promotionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 2);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_mUpdatePromotionUseNum_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OrderService_mUpdatePromotionUseNum_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_mUpdatePromotionUseNum_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_sendNotPaySms_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'OrderService_sendNotPaySms_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_sendNotPaySms_args');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_sendNotPaySms_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OrderService_sendNotPaySms_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_sendNotPaySms_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_sendNotPayMessage_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $user_id = null;
  /**
   * @var int
   */
  public $event_id = null;
  /**
   * @var string
   */
  public $type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'event_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['event_id'])) {
        $this->event_id = $vals['event_id'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
    }
  }

  public function getName() {
    return 'OrderService_sendNotPayMessage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->event_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_sendNotPayMessage_args');
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I32, 1);
      $xfer += $output->writeI32($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->event_id !== null) {
      $xfer += $output->writeFieldBegin('event_id', TType::I32, 2);
      $xfer += $output->writeI32($this->event_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 3);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_sendNotPayMessage_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OrderService_sendNotPayMessage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_sendNotPayMessage_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_checkAllowReceiveCouponByMobile_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mobile = null;
  /**
   * @var int
   */
  public $promotion_id = null;
  /**
   * @var array
   */
  public $fasthand_item_promotion = null;
  /**
   * @var int
   */
  public $user_id = null;
  /**
   * @var double
   */
  public $amount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'promotion_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'fasthand_item_promotion',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['promotion_id'])) {
        $this->promotion_id = $vals['promotion_id'];
      }
      if (isset($vals['fasthand_item_promotion'])) {
        $this->fasthand_item_promotion = $vals['fasthand_item_promotion'];
      }
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
    }
  }

  public function getName() {
    return 'OrderService_checkAllowReceiveCouponByMobile_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->promotion_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->fasthand_item_promotion = array();
            $_size27 = 0;
            $_ktype28 = 0;
            $_vtype29 = 0;
            $xfer += $input->readMapBegin($_ktype28, $_vtype29, $_size27);
            for ($_i31 = 0; $_i31 < $_size27; ++$_i31)
            {
              $key32 = '';
              $val33 = '';
              $xfer += $input->readString($key32);
              $xfer += $input->readString($val33);
              $this->fasthand_item_promotion[$key32] = $val33;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_checkAllowReceiveCouponByMobile_args');
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 1);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promotion_id !== null) {
      $xfer += $output->writeFieldBegin('promotion_id', TType::I32, 2);
      $xfer += $output->writeI32($this->promotion_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fasthand_item_promotion !== null) {
      if (!is_array($this->fasthand_item_promotion)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fasthand_item_promotion', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->fasthand_item_promotion));
        {
          foreach ($this->fasthand_item_promotion as $kiter34 => $viter35)
          {
            $xfer += $output->writeString($kiter34);
            $xfer += $output->writeString($viter35);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I32, 4);
      $xfer += $output->writeI32($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_checkAllowReceiveCouponByMobile_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_checkAllowReceiveCouponByMobile_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_checkAllowReceiveCouponByMobile_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_checkAllowReceiveCouponByUserId_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $promotion_id = null;
  /**
   * @var double
   */
  public $amount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'promotion_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['promotion_id'])) {
        $this->promotion_id = $vals['promotion_id'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
    }
  }

  public function getName() {
    return 'OrderService_checkAllowReceiveCouponByUserId_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->promotion_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_checkAllowReceiveCouponByUserId_args');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promotion_id !== null) {
      $xfer += $output->writeFieldBegin('promotion_id', TType::I32, 2);
      $xfer += $output->writeI32($this->promotion_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_checkAllowReceiveCouponByUserId_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_checkAllowReceiveCouponByUserId_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_checkAllowReceiveCouponByUserId_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_updatePromotionUserByRegister_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $mobile = null;
  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'OrderService_updatePromotionUserByRegister_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_updatePromotionUserByRegister_args');
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 1);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_updatePromotionUserByRegister_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_updatePromotionUserByRegister_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_updatePromotionUserByRegister_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_checkPromotionStatus_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $my_promotion_id = null;
  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'my_promotion_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['my_promotion_id'])) {
        $this->my_promotion_id = $vals['my_promotion_id'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'OrderService_checkPromotionStatus_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->my_promotion_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_checkPromotionStatus_args');
    if ($this->my_promotion_id !== null) {
      $xfer += $output->writeFieldBegin('my_promotion_id', TType::I32, 1);
      $xfer += $output->writeI32($this->my_promotion_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_checkPromotionStatus_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_checkPromotionStatus_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_checkPromotionStatus_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_checkInventoryStatus_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $event_id = null;
  /**
   * @var string
   */
  public $type = null;
  /**
   * @var int
   */
  public $number = null;
  /**
   * @var array
   */
  public $itemOriginVo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'event_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'number',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'itemOriginVo',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['event_id'])) {
        $this->event_id = $vals['event_id'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['number'])) {
        $this->number = $vals['number'];
      }
      if (isset($vals['itemOriginVo'])) {
        $this->itemOriginVo = $vals['itemOriginVo'];
      }
    }
  }

  public function getName() {
    return 'OrderService_checkInventoryStatus_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->event_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->itemOriginVo = array();
            $_size36 = 0;
            $_ktype37 = 0;
            $_vtype38 = 0;
            $xfer += $input->readMapBegin($_ktype37, $_vtype38, $_size36);
            for ($_i40 = 0; $_i40 < $_size36; ++$_i40)
            {
              $key41 = '';
              $val42 = '';
              $xfer += $input->readString($key41);
              $xfer += $input->readString($val42);
              $this->itemOriginVo[$key41] = $val42;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_checkInventoryStatus_args');
    if ($this->event_id !== null) {
      $xfer += $output->writeFieldBegin('event_id', TType::I32, 1);
      $xfer += $output->writeI32($this->event_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 2);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number !== null) {
      $xfer += $output->writeFieldBegin('number', TType::I32, 3);
      $xfer += $output->writeI32($this->number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemOriginVo !== null) {
      if (!is_array($this->itemOriginVo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('itemOriginVo', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->itemOriginVo));
        {
          foreach ($this->itemOriginVo as $kiter43 => $viter44)
          {
            $xfer += $output->writeString($kiter43);
            $xfer += $output->writeString($viter44);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_checkInventoryStatus_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_checkInventoryStatus_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_checkInventoryStatus_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_checkSkuInventoryStatus_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $event_id = null;
  /**
   * @var string
   */
  public $event_type = null;
  /**
   * @var int
   */
  public $sku_id = null;
  /**
   * @var int
   */
  public $number = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'event_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'event_type',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'sku_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'number',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['event_id'])) {
        $this->event_id = $vals['event_id'];
      }
      if (isset($vals['event_type'])) {
        $this->event_type = $vals['event_type'];
      }
      if (isset($vals['sku_id'])) {
        $this->sku_id = $vals['sku_id'];
      }
      if (isset($vals['number'])) {
        $this->number = $vals['number'];
      }
    }
  }

  public function getName() {
    return 'OrderService_checkSkuInventoryStatus_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->event_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->event_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sku_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_checkSkuInventoryStatus_args');
    if ($this->event_id !== null) {
      $xfer += $output->writeFieldBegin('event_id', TType::I32, 1);
      $xfer += $output->writeI32($this->event_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->event_type !== null) {
      $xfer += $output->writeFieldBegin('event_type', TType::STRING, 2);
      $xfer += $output->writeString($this->event_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sku_id !== null) {
      $xfer += $output->writeFieldBegin('sku_id', TType::I32, 3);
      $xfer += $output->writeI32($this->sku_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number !== null) {
      $xfer += $output->writeFieldBegin('number', TType::I32, 4);
      $xfer += $output->writeI32($this->number);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_checkSkuInventoryStatus_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_checkSkuInventoryStatus_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_checkSkuInventoryStatus_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_updateInventoryNumber_args {
  static $_TSPEC;

  /**
   * @var array
   */
  public $fasthand_order = null;
  /**
   * @var string
   */
  public $type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fasthand_order',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fasthand_order'])) {
        $this->fasthand_order = $vals['fasthand_order'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
    }
  }

  public function getName() {
    return 'OrderService_updateInventoryNumber_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->fasthand_order = array();
            $_size45 = 0;
            $_ktype46 = 0;
            $_vtype47 = 0;
            $xfer += $input->readMapBegin($_ktype46, $_vtype47, $_size45);
            for ($_i49 = 0; $_i49 < $_size45; ++$_i49)
            {
              $key50 = '';
              $val51 = '';
              $xfer += $input->readString($key50);
              $xfer += $input->readString($val51);
              $this->fasthand_order[$key50] = $val51;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_updateInventoryNumber_args');
    if ($this->fasthand_order !== null) {
      if (!is_array($this->fasthand_order)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fasthand_order', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->fasthand_order));
        {
          foreach ($this->fasthand_order as $kiter52 => $viter53)
          {
            $xfer += $output->writeString($kiter52);
            $xfer += $output->writeString($viter53);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 2);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_updateInventoryNumber_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_updateInventoryNumber_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_updateInventoryNumber_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_syncPromotionToItem_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $event_id = null;
  /**
   * @var string
   */
  public $event_type = null;
  /**
   * @var int
   */
  public $type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'event_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'event_type',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['event_id'])) {
        $this->event_id = $vals['event_id'];
      }
      if (isset($vals['event_type'])) {
        $this->event_type = $vals['event_type'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
    }
  }

  public function getName() {
    return 'OrderService_syncPromotionToItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->event_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->event_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_syncPromotionToItem_args');
    if ($this->event_id !== null) {
      $xfer += $output->writeFieldBegin('event_id', TType::I32, 1);
      $xfer += $output->writeI32($this->event_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->event_type !== null) {
      $xfer += $output->writeFieldBegin('event_type', TType::STRING, 2);
      $xfer += $output->writeString($this->event_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_syncPromotionToItem_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OrderService_syncPromotionToItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_syncPromotionToItem_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getPromotionUserId_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $event_type = null;
  /**
   * @var int
   */
  public $event_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'event_type',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'event_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['event_type'])) {
        $this->event_type = $vals['event_type'];
      }
      if (isset($vals['event_id'])) {
        $this->event_id = $vals['event_id'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getPromotionUserId_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->event_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->event_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getPromotionUserId_args');
    if ($this->event_type !== null) {
      $xfer += $output->writeFieldBegin('event_type', TType::STRING, 1);
      $xfer += $output->writeString($this->event_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->event_id !== null) {
      $xfer += $output->writeFieldBegin('event_id', TType::I32, 2);
      $xfer += $output->writeI32($this->event_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getPromotionUserId_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getPromotionUserId_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getPromotionUserId_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_addMessage_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $city_id = null;
  /**
   * @var string
   */
  public $client_source = null;
  /**
   * @var string
   */
  public $content = null;
  /**
   * @var string
   */
  public $effective_time = null;
  /**
   * @var string
   */
  public $invalid_time = null;
  /**
   * @var int
   */
  public $message_type = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $userRole = null;
  /**
   * @var array
   */
  public $dataArray = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'city_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'client_source',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'effective_time',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'invalid_time',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'message_type',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'userRole',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'dataArray',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['city_id'])) {
        $this->city_id = $vals['city_id'];
      }
      if (isset($vals['client_source'])) {
        $this->client_source = $vals['client_source'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['effective_time'])) {
        $this->effective_time = $vals['effective_time'];
      }
      if (isset($vals['invalid_time'])) {
        $this->invalid_time = $vals['invalid_time'];
      }
      if (isset($vals['message_type'])) {
        $this->message_type = $vals['message_type'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['userRole'])) {
        $this->userRole = $vals['userRole'];
      }
      if (isset($vals['dataArray'])) {
        $this->dataArray = $vals['dataArray'];
      }
    }
  }

  public function getName() {
    return 'OrderService_addMessage_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->city_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->client_source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->effective_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->invalid_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->message_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userRole);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::MAP) {
            $this->dataArray = array();
            $_size54 = 0;
            $_ktype55 = 0;
            $_vtype56 = 0;
            $xfer += $input->readMapBegin($_ktype55, $_vtype56, $_size54);
            for ($_i58 = 0; $_i58 < $_size54; ++$_i58)
            {
              $key59 = '';
              $val60 = '';
              $xfer += $input->readString($key59);
              $xfer += $input->readString($val60);
              $this->dataArray[$key59] = $val60;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_addMessage_args');
    if ($this->city_id !== null) {
      $xfer += $output->writeFieldBegin('city_id', TType::I32, 1);
      $xfer += $output->writeI32($this->city_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->client_source !== null) {
      $xfer += $output->writeFieldBegin('client_source', TType::STRING, 2);
      $xfer += $output->writeString($this->client_source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 3);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->effective_time !== null) {
      $xfer += $output->writeFieldBegin('effective_time', TType::STRING, 4);
      $xfer += $output->writeString($this->effective_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invalid_time !== null) {
      $xfer += $output->writeFieldBegin('invalid_time', TType::STRING, 5);
      $xfer += $output->writeString($this->invalid_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message_type !== null) {
      $xfer += $output->writeFieldBegin('message_type', TType::I32, 6);
      $xfer += $output->writeI32($this->message_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 7);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 8);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userRole !== null) {
      $xfer += $output->writeFieldBegin('userRole', TType::I32, 9);
      $xfer += $output->writeI32($this->userRole);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataArray !== null) {
      if (!is_array($this->dataArray)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('dataArray', TType::MAP, 10);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->dataArray));
        {
          foreach ($this->dataArray as $kiter61 => $viter62)
          {
            $xfer += $output->writeString($kiter61);
            $xfer += $output->writeString($viter62);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_addMessage_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_addMessage_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_addMessage_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getPomotionInfoByItem_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $event_id = null;
  /**
   * @var string
   */
  public $event_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'event_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'event_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['event_id'])) {
        $this->event_id = $vals['event_id'];
      }
      if (isset($vals['event_type'])) {
        $this->event_type = $vals['event_type'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getPomotionInfoByItem_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->event_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->event_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getPomotionInfoByItem_args');
    if ($this->event_id !== null) {
      $xfer += $output->writeFieldBegin('event_id', TType::I32, 1);
      $xfer += $output->writeI32($this->event_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->event_type !== null) {
      $xfer += $output->writeFieldBegin('event_type', TType::STRING, 2);
      $xfer += $output->writeString($this->event_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getPomotionInfoByItem_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getPomotionInfoByItem_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size63 = 0;
            $_ktype64 = 0;
            $_vtype65 = 0;
            $xfer += $input->readMapBegin($_ktype64, $_vtype65, $_size63);
            for ($_i67 = 0; $_i67 < $_size63; ++$_i67)
            {
              $key68 = '';
              $val69 = '';
              $xfer += $input->readString($key68);
              $xfer += $input->readString($val69);
              $this->success[$key68] = $val69;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getPomotionInfoByItem_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter70 => $viter71)
          {
            $xfer += $output->writeString($kiter70);
            $xfer += $output->writeString($viter71);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getItemSkuList_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $event_id = null;
  /**
   * @var string
   */
  public $event_type = null;
  /**
   * @var array
   */
  public $extendInfoArray = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'event_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'event_type',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'extendInfoArray',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['event_id'])) {
        $this->event_id = $vals['event_id'];
      }
      if (isset($vals['event_type'])) {
        $this->event_type = $vals['event_type'];
      }
      if (isset($vals['extendInfoArray'])) {
        $this->extendInfoArray = $vals['extendInfoArray'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getItemSkuList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->event_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->event_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->extendInfoArray = array();
            $_size72 = 0;
            $_ktype73 = 0;
            $_vtype74 = 0;
            $xfer += $input->readMapBegin($_ktype73, $_vtype74, $_size72);
            for ($_i76 = 0; $_i76 < $_size72; ++$_i76)
            {
              $key77 = '';
              $val78 = '';
              $xfer += $input->readString($key77);
              $xfer += $input->readString($val78);
              $this->extendInfoArray[$key77] = $val78;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getItemSkuList_args');
    if ($this->event_id !== null) {
      $xfer += $output->writeFieldBegin('event_id', TType::I32, 1);
      $xfer += $output->writeI32($this->event_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->event_type !== null) {
      $xfer += $output->writeFieldBegin('event_type', TType::STRING, 2);
      $xfer += $output->writeString($this->event_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extendInfoArray !== null) {
      if (!is_array($this->extendInfoArray)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extendInfoArray', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->extendInfoArray));
        {
          foreach ($this->extendInfoArray as $kiter79 => $viter80)
          {
            $xfer += $output->writeString($kiter79);
            $xfer += $output->writeString($viter80);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getItemSkuList_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getItemSkuList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size81 = 0;
            $_ktype82 = 0;
            $_vtype83 = 0;
            $xfer += $input->readMapBegin($_ktype82, $_vtype83, $_size81);
            for ($_i85 = 0; $_i85 < $_size81; ++$_i85)
            {
              $key86 = '';
              $val87 = '';
              $xfer += $input->readString($key86);
              $xfer += $input->readString($val87);
              $this->success[$key86] = $val87;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getItemSkuList_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter88 => $viter89)
          {
            $xfer += $output->writeString($kiter88);
            $xfer += $output->writeString($viter89);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_addSkuInfoByActivity_args {
  static $_TSPEC;

  /**
   * @var array
   */
  public $fasthand_activity = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fasthand_activity',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fasthand_activity'])) {
        $this->fasthand_activity = $vals['fasthand_activity'];
      }
    }
  }

  public function getName() {
    return 'OrderService_addSkuInfoByActivity_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->fasthand_activity = array();
            $_size90 = 0;
            $_ktype91 = 0;
            $_vtype92 = 0;
            $xfer += $input->readMapBegin($_ktype91, $_vtype92, $_size90);
            for ($_i94 = 0; $_i94 < $_size90; ++$_i94)
            {
              $key95 = '';
              $val96 = '';
              $xfer += $input->readString($key95);
              $xfer += $input->readString($val96);
              $this->fasthand_activity[$key95] = $val96;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_addSkuInfoByActivity_args');
    if ($this->fasthand_activity !== null) {
      if (!is_array($this->fasthand_activity)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fasthand_activity', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->fasthand_activity));
        {
          foreach ($this->fasthand_activity as $kiter97 => $viter98)
          {
            $xfer += $output->writeString($kiter97);
            $xfer += $output->writeString($viter98);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_addSkuInfoByActivity_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_addSkuInfoByActivity_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size99 = 0;
            $_ktype100 = 0;
            $_vtype101 = 0;
            $xfer += $input->readMapBegin($_ktype100, $_vtype101, $_size99);
            for ($_i103 = 0; $_i103 < $_size99; ++$_i103)
            {
              $key104 = '';
              $val105 = '';
              $xfer += $input->readString($key104);
              $xfer += $input->readString($val105);
              $this->success[$key104] = $val105;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_addSkuInfoByActivity_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter106 => $viter107)
          {
            $xfer += $output->writeString($kiter106);
            $xfer += $output->writeString($viter107);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getOrderIntegralNum_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getOrderIntegralNum_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getOrderIntegralNum_args');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getOrderIntegralNum_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getOrderIntegralNum_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getOrderIntegralNum_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getOrderIntegralConvertPrice_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var double
   */
  public $item_price = null;
  /**
   * @var int
   */
  public $integral_num = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'item_price',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'integral_num',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['item_price'])) {
        $this->item_price = $vals['item_price'];
      }
      if (isset($vals['integral_num'])) {
        $this->integral_num = $vals['integral_num'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getOrderIntegralConvertPrice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->item_price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->integral_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getOrderIntegralConvertPrice_args');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->item_price !== null) {
      $xfer += $output->writeFieldBegin('item_price', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->item_price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->integral_num !== null) {
      $xfer += $output->writeFieldBegin('integral_num', TType::I32, 3);
      $xfer += $output->writeI32($this->integral_num);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getOrderIntegralConvertPrice_result {
  static $_TSPEC;

  /**
   * @var double
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getOrderIntegralConvertPrice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getOrderIntegralConvertPrice_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::DOUBLE, 0);
      $xfer += $output->writeDouble($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_transcodeCertificatesToDescribes_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $certificates = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'certificates',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['certificates'])) {
        $this->certificates = $vals['certificates'];
      }
    }
  }

  public function getName() {
    return 'OrderService_transcodeCertificatesToDescribes_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->certificates);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_transcodeCertificatesToDescribes_args');
    if ($this->certificates !== null) {
      $xfer += $output->writeFieldBegin('certificates', TType::STRING, 1);
      $xfer += $output->writeString($this->certificates);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_transcodeCertificatesToDescribes_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_transcodeCertificatesToDescribes_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_transcodeCertificatesToDescribes_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getPromotionPrice_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var double
   */
  public $price = null;
  /**
   * @var double
   */
  public $amount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'price',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getPromotionPrice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getPromotionPrice_args');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getPromotionPrice_result {
  static $_TSPEC;

  /**
   * @var double
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getPromotionPrice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getPromotionPrice_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::DOUBLE, 0);
      $xfer += $output->writeDouble($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getPriceByDiscountRate_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var double
   */
  public $promotionPrice = null;
  /**
   * @var double
   */
  public $amount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'promotionPrice',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['promotionPrice'])) {
        $this->promotionPrice = $vals['promotionPrice'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getPriceByDiscountRate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->promotionPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getPriceByDiscountRate_args');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promotionPrice !== null) {
      $xfer += $output->writeFieldBegin('promotionPrice', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->promotionPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getPriceByDiscountRate_result {
  static $_TSPEC;

  /**
   * @var double
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getPriceByDiscountRate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getPriceByDiscountRate_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::DOUBLE, 0);
      $xfer += $output->writeDouble($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getPropValueByProps_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $props = null;
  /**
   * @var string
   */
  public $pids = null;
  /**
   * @var string
   */
  public $vids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'props',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'pids',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'vids',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['props'])) {
        $this->props = $vals['props'];
      }
      if (isset($vals['pids'])) {
        $this->pids = $vals['pids'];
      }
      if (isset($vals['vids'])) {
        $this->vids = $vals['vids'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getPropValueByProps_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->props);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pids);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->vids);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getPropValueByProps_args');
    if ($this->props !== null) {
      $xfer += $output->writeFieldBegin('props', TType::STRING, 1);
      $xfer += $output->writeString($this->props);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pids !== null) {
      $xfer += $output->writeFieldBegin('pids', TType::STRING, 2);
      $xfer += $output->writeString($this->pids);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vids !== null) {
      $xfer += $output->writeFieldBegin('vids', TType::STRING, 3);
      $xfer += $output->writeString($this->vids);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getPropValueByProps_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OrderService_getPropValueByProps_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getPropValueByProps_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getSkuPropValues_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $sku_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sku_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sku_id'])) {
        $this->sku_id = $vals['sku_id'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getSkuPropValues_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sku_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getSkuPropValues_args');
    if ($this->sku_id !== null) {
      $xfer += $output->writeFieldBegin('sku_id', TType::I32, 1);
      $xfer += $output->writeI32($this->sku_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getSkuPropValues_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getSkuPropValues_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getSkuPropValues_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_createItemSnapshotObject_args {
  static $_TSPEC;

  /**
   * @var array
   */
  public $request = null;
  /**
   * @var int
   */
  public $seller_id = null;
  /**
   * @var int
   */
  public $seller_user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'request',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'seller_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'seller_user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['request'])) {
        $this->request = $vals['request'];
      }
      if (isset($vals['seller_id'])) {
        $this->seller_id = $vals['seller_id'];
      }
      if (isset($vals['seller_user_id'])) {
        $this->seller_user_id = $vals['seller_user_id'];
      }
    }
  }

  public function getName() {
    return 'OrderService_createItemSnapshotObject_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->request = array();
            $_size108 = 0;
            $_ktype109 = 0;
            $_vtype110 = 0;
            $xfer += $input->readMapBegin($_ktype109, $_vtype110, $_size108);
            for ($_i112 = 0; $_i112 < $_size108; ++$_i112)
            {
              $key113 = '';
              $val114 = '';
              $xfer += $input->readString($key113);
              $xfer += $input->readString($val114);
              $this->request[$key113] = $val114;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seller_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seller_user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_createItemSnapshotObject_args');
    if ($this->request !== null) {
      if (!is_array($this->request)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('request', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->request));
        {
          foreach ($this->request as $kiter115 => $viter116)
          {
            $xfer += $output->writeString($kiter115);
            $xfer += $output->writeString($viter116);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seller_id !== null) {
      $xfer += $output->writeFieldBegin('seller_id', TType::I32, 2);
      $xfer += $output->writeI32($this->seller_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seller_user_id !== null) {
      $xfer += $output->writeFieldBegin('seller_user_id', TType::I32, 3);
      $xfer += $output->writeI32($this->seller_user_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_createItemSnapshotObject_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_createItemSnapshotObject_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_createItemSnapshotObject_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_updateActivityProps_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $sku_id = null;
  /**
   * @var string
   */
  public $properties = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'sku_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'properties',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['sku_id'])) {
        $this->sku_id = $vals['sku_id'];
      }
      if (isset($vals['properties'])) {
        $this->properties = $vals['properties'];
      }
    }
  }

  public function getName() {
    return 'OrderService_updateActivityProps_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sku_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->properties);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_updateActivityProps_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sku_id !== null) {
      $xfer += $output->writeFieldBegin('sku_id', TType::I32, 2);
      $xfer += $output->writeI32($this->sku_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->properties !== null) {
      $xfer += $output->writeFieldBegin('properties', TType::STRING, 3);
      $xfer += $output->writeString($this->properties);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_updateActivityProps_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_updateActivityProps_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_updateActivityProps_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_createPropsBySkus_args {
  static $_TSPEC;

  /**
   * @var array
   */
  public $fasthand_item_skuArray = null;
  /**
   * @var string
   */
  public $addProperties = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fasthand_item_skuArray',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'addProperties',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fasthand_item_skuArray'])) {
        $this->fasthand_item_skuArray = $vals['fasthand_item_skuArray'];
      }
      if (isset($vals['addProperties'])) {
        $this->addProperties = $vals['addProperties'];
      }
    }
  }

  public function getName() {
    return 'OrderService_createPropsBySkus_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->fasthand_item_skuArray = array();
            $_size117 = 0;
            $_ktype118 = 0;
            $_vtype119 = 0;
            $xfer += $input->readMapBegin($_ktype118, $_vtype119, $_size117);
            for ($_i121 = 0; $_i121 < $_size117; ++$_i121)
            {
              $key122 = '';
              $val123 = '';
              $xfer += $input->readString($key122);
              $xfer += $input->readString($val123);
              $this->fasthand_item_skuArray[$key122] = $val123;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->addProperties);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_createPropsBySkus_args');
    if ($this->fasthand_item_skuArray !== null) {
      if (!is_array($this->fasthand_item_skuArray)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fasthand_item_skuArray', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->fasthand_item_skuArray));
        {
          foreach ($this->fasthand_item_skuArray as $kiter124 => $viter125)
          {
            $xfer += $output->writeString($kiter124);
            $xfer += $output->writeString($viter125);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->addProperties !== null) {
      $xfer += $output->writeFieldBegin('addProperties', TType::STRING, 2);
      $xfer += $output->writeString($this->addProperties);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_createPropsBySkus_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_createPropsBySkus_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_createPropsBySkus_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_checkPromotionReceiveStatus_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $event_id = null;
  /**
   * @var string
   */
  public $event_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'event_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'event_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['event_id'])) {
        $this->event_id = $vals['event_id'];
      }
      if (isset($vals['event_type'])) {
        $this->event_type = $vals['event_type'];
      }
    }
  }

  public function getName() {
    return 'OrderService_checkPromotionReceiveStatus_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->event_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->event_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_checkPromotionReceiveStatus_args');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->event_id !== null) {
      $xfer += $output->writeFieldBegin('event_id', TType::I32, 2);
      $xfer += $output->writeI32($this->event_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->event_type !== null) {
      $xfer += $output->writeFieldBegin('event_type', TType::STRING, 3);
      $xfer += $output->writeString($this->event_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_checkPromotionReceiveStatus_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_checkPromotionReceiveStatus_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_checkPromotionReceiveStatus_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_addConsumIncomeRecord_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $invite_code = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var double
   */
  public $pay_amount = null;
  /**
   * @var int
   */
  public $event_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invite_code',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'pay_amount',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'event_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invite_code'])) {
        $this->invite_code = $vals['invite_code'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['pay_amount'])) {
        $this->pay_amount = $vals['pay_amount'];
      }
      if (isset($vals['event_id'])) {
        $this->event_id = $vals['event_id'];
      }
    }
  }

  public function getName() {
    return 'OrderService_addConsumIncomeRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->invite_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->pay_amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->event_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_addConsumIncomeRecord_args');
    if ($this->invite_code !== null) {
      $xfer += $output->writeFieldBegin('invite_code', TType::STRING, 1);
      $xfer += $output->writeString($this->invite_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pay_amount !== null) {
      $xfer += $output->writeFieldBegin('pay_amount', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->pay_amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->event_id !== null) {
      $xfer += $output->writeFieldBegin('event_id', TType::I32, 4);
      $xfer += $output->writeI32($this->event_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_addConsumIncomeRecord_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_addConsumIncomeRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_addConsumIncomeRecord_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_checkInviteCodeStatus_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $invite_code = null;
  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invite_code',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['invite_code'])) {
        $this->invite_code = $vals['invite_code'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'OrderService_checkInviteCodeStatus_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->invite_code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_checkInviteCodeStatus_args');
    if ($this->invite_code !== null) {
      $xfer += $output->writeFieldBegin('invite_code', TType::STRING, 1);
      $xfer += $output->writeString($this->invite_code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_checkInviteCodeStatus_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_checkInviteCodeStatus_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_checkInviteCodeStatus_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_addMyIncomeRecord_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var double
   */
  public $amount = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $origin_user_id = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $event_id = null;
  /**
   * @var string
   */
  public $event_type = null;
  /**
   * @var string
   */
  public $action = null;
  /**
   * @var array
   */
  public $fasthand_user = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'origin_user_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'event_id',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'event_type',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'action',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'fasthand_user',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['origin_user_id'])) {
        $this->origin_user_id = $vals['origin_user_id'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['event_id'])) {
        $this->event_id = $vals['event_id'];
      }
      if (isset($vals['event_type'])) {
        $this->event_type = $vals['event_type'];
      }
      if (isset($vals['action'])) {
        $this->action = $vals['action'];
      }
      if (isset($vals['fasthand_user'])) {
        $this->fasthand_user = $vals['fasthand_user'];
      }
    }
  }

  public function getName() {
    return 'OrderService_addMyIncomeRecord_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->origin_user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->event_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->event_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->action);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::MAP) {
            $this->fasthand_user = array();
            $_size126 = 0;
            $_ktype127 = 0;
            $_vtype128 = 0;
            $xfer += $input->readMapBegin($_ktype127, $_vtype128, $_size126);
            for ($_i130 = 0; $_i130 < $_size126; ++$_i130)
            {
              $key131 = '';
              $val132 = '';
              $xfer += $input->readString($key131);
              $xfer += $input->readString($val132);
              $this->fasthand_user[$key131] = $val132;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_addMyIncomeRecord_args');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 3);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 4);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->origin_user_id !== null) {
      $xfer += $output->writeFieldBegin('origin_user_id', TType::I32, 5);
      $xfer += $output->writeI32($this->origin_user_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 6);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->event_id !== null) {
      $xfer += $output->writeFieldBegin('event_id', TType::I32, 7);
      $xfer += $output->writeI32($this->event_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->event_type !== null) {
      $xfer += $output->writeFieldBegin('event_type', TType::STRING, 8);
      $xfer += $output->writeString($this->event_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->action !== null) {
      $xfer += $output->writeFieldBegin('action', TType::STRING, 9);
      $xfer += $output->writeString($this->action);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fasthand_user !== null) {
      if (!is_array($this->fasthand_user)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fasthand_user', TType::MAP, 10);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->fasthand_user));
        {
          foreach ($this->fasthand_user as $kiter133 => $viter134)
          {
            $xfer += $output->writeString($kiter133);
            $xfer += $output->writeString($viter134);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_addMyIncomeRecord_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_addMyIncomeRecord_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_addMyIncomeRecord_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_createConsumCode_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $event_id = null;
  /**
   * @var string
   */
  public $event_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'event_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'event_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['event_id'])) {
        $this->event_id = $vals['event_id'];
      }
      if (isset($vals['event_type'])) {
        $this->event_type = $vals['event_type'];
      }
    }
  }

  public function getName() {
    return 'OrderService_createConsumCode_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->event_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->event_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_createConsumCode_args');
    if ($this->event_id !== null) {
      $xfer += $output->writeFieldBegin('event_id', TType::STRING, 1);
      $xfer += $output->writeString($this->event_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->event_type !== null) {
      $xfer += $output->writeFieldBegin('event_type', TType::STRING, 2);
      $xfer += $output->writeString($this->event_type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_createConsumCode_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_createConsumCode_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_createConsumCode_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getPromotionList_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $event_id = null;
  /**
   * @var string
   */
  public $event_type = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var bool
   */
  public $notType = null;
  /**
   * @var bool
   */
  public $is_allow_promotion = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'event_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'event_type',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'notType',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'is_allow_promotion',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['event_id'])) {
        $this->event_id = $vals['event_id'];
      }
      if (isset($vals['event_type'])) {
        $this->event_type = $vals['event_type'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['notType'])) {
        $this->notType = $vals['notType'];
      }
      if (isset($vals['is_allow_promotion'])) {
        $this->is_allow_promotion = $vals['is_allow_promotion'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getPromotionList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->event_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->event_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_allow_promotion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getPromotionList_args');
    if ($this->event_id !== null) {
      $xfer += $output->writeFieldBegin('event_id', TType::I32, 1);
      $xfer += $output->writeI32($this->event_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->event_type !== null) {
      $xfer += $output->writeFieldBegin('event_type', TType::STRING, 2);
      $xfer += $output->writeString($this->event_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 3);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notType !== null) {
      $xfer += $output->writeFieldBegin('notType', TType::BOOL, 4);
      $xfer += $output->writeBool($this->notType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_allow_promotion !== null) {
      $xfer += $output->writeFieldBegin('is_allow_promotion', TType::BOOL, 5);
      $xfer += $output->writeBool($this->is_allow_promotion);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getPromotionList_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getPromotionList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size135 = 0;
            $_ktype136 = 0;
            $_vtype137 = 0;
            $xfer += $input->readMapBegin($_ktype136, $_vtype137, $_size135);
            for ($_i139 = 0; $_i139 < $_size135; ++$_i139)
            {
              $key140 = '';
              $val141 = '';
              $xfer += $input->readString($key140);
              $xfer += $input->readString($val141);
              $this->success[$key140] = $val141;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getPromotionList_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter142 => $viter143)
          {
            $xfer += $output->writeString($kiter142);
            $xfer += $output->writeString($viter143);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getMaxBuyNum_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $event_id = null;
  /**
   * @var string
   */
  public $event_type = null;
  /**
   * @var int
   */
  public $max_buy_num = null;
  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'event_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'event_type',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'max_buy_num',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['event_id'])) {
        $this->event_id = $vals['event_id'];
      }
      if (isset($vals['event_type'])) {
        $this->event_type = $vals['event_type'];
      }
      if (isset($vals['max_buy_num'])) {
        $this->max_buy_num = $vals['max_buy_num'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getMaxBuyNum_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->event_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->event_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->max_buy_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getMaxBuyNum_args');
    if ($this->event_id !== null) {
      $xfer += $output->writeFieldBegin('event_id', TType::I32, 1);
      $xfer += $output->writeI32($this->event_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->event_type !== null) {
      $xfer += $output->writeFieldBegin('event_type', TType::STRING, 2);
      $xfer += $output->writeString($this->event_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->max_buy_num !== null) {
      $xfer += $output->writeFieldBegin('max_buy_num', TType::I32, 3);
      $xfer += $output->writeI32($this->max_buy_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 4);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getMaxBuyNum_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getMaxBuyNum_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getMaxBuyNum_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_checkUserMaxBuyNum_args {
  static $_TSPEC;

  /**
   * @var array
   */
  public $itemOriginVo = null;
  /**
   * @var int
   */
  public $event_id = null;
  /**
   * @var string
   */
  public $event_type = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $number = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'itemOriginVo',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'event_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'event_type',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'number',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['itemOriginVo'])) {
        $this->itemOriginVo = $vals['itemOriginVo'];
      }
      if (isset($vals['event_id'])) {
        $this->event_id = $vals['event_id'];
      }
      if (isset($vals['event_type'])) {
        $this->event_type = $vals['event_type'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['number'])) {
        $this->number = $vals['number'];
      }
    }
  }

  public function getName() {
    return 'OrderService_checkUserMaxBuyNum_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->itemOriginVo = array();
            $_size144 = 0;
            $_ktype145 = 0;
            $_vtype146 = 0;
            $xfer += $input->readMapBegin($_ktype145, $_vtype146, $_size144);
            for ($_i148 = 0; $_i148 < $_size144; ++$_i148)
            {
              $key149 = '';
              $val150 = '';
              $xfer += $input->readString($key149);
              $xfer += $input->readString($val150);
              $this->itemOriginVo[$key149] = $val150;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->event_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->event_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_checkUserMaxBuyNum_args');
    if ($this->itemOriginVo !== null) {
      if (!is_array($this->itemOriginVo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('itemOriginVo', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->itemOriginVo));
        {
          foreach ($this->itemOriginVo as $kiter151 => $viter152)
          {
            $xfer += $output->writeString($kiter151);
            $xfer += $output->writeString($viter152);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->event_id !== null) {
      $xfer += $output->writeFieldBegin('event_id', TType::I32, 2);
      $xfer += $output->writeI32($this->event_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->event_type !== null) {
      $xfer += $output->writeFieldBegin('event_type', TType::STRING, 3);
      $xfer += $output->writeString($this->event_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 4);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number !== null) {
      $xfer += $output->writeFieldBegin('number', TType::I32, 5);
      $xfer += $output->writeI32($this->number);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_checkUserMaxBuyNum_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_checkUserMaxBuyNum_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_checkUserMaxBuyNum_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getItemOriginVo_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $event_id = null;
  /**
   * @var string
   */
  public $type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'event_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['event_id'])) {
        $this->event_id = $vals['event_id'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getItemOriginVo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->event_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getItemOriginVo_args');
    if ($this->event_id !== null) {
      $xfer += $output->writeFieldBegin('event_id', TType::I32, 1);
      $xfer += $output->writeI32($this->event_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 2);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getItemOriginVo_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getItemOriginVo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getItemOriginVo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_checkIsDiscount_args {
  static $_TSPEC;

  /**
   * @var array
   */
  public $fasthand_item_promotion = null;
  /**
   * @var string
   */
  public $pid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fasthand_item_promotion',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'pid',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fasthand_item_promotion'])) {
        $this->fasthand_item_promotion = $vals['fasthand_item_promotion'];
      }
      if (isset($vals['pid'])) {
        $this->pid = $vals['pid'];
      }
    }
  }

  public function getName() {
    return 'OrderService_checkIsDiscount_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->fasthand_item_promotion = array();
            $_size153 = 0;
            $_ktype154 = 0;
            $_vtype155 = 0;
            $xfer += $input->readMapBegin($_ktype154, $_vtype155, $_size153);
            for ($_i157 = 0; $_i157 < $_size153; ++$_i157)
            {
              $key158 = '';
              $val159 = '';
              $xfer += $input->readString($key158);
              $xfer += $input->readString($val159);
              $this->fasthand_item_promotion[$key158] = $val159;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_checkIsDiscount_args');
    if ($this->fasthand_item_promotion !== null) {
      if (!is_array($this->fasthand_item_promotion)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fasthand_item_promotion', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->fasthand_item_promotion));
        {
          foreach ($this->fasthand_item_promotion as $kiter160 => $viter161)
          {
            $xfer += $output->writeString($kiter160);
            $xfer += $output->writeString($viter161);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pid !== null) {
      $xfer += $output->writeFieldBegin('pid', TType::STRING, 2);
      $xfer += $output->writeString($this->pid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_checkIsDiscount_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_checkIsDiscount_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_checkIsDiscount_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getSkuInfoById_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $sku_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sku_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sku_id'])) {
        $this->sku_id = $vals['sku_id'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getSkuInfoById_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sku_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getSkuInfoById_args');
    if ($this->sku_id !== null) {
      $xfer += $output->writeFieldBegin('sku_id', TType::I32, 1);
      $xfer += $output->writeI32($this->sku_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getSkuInfoById_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getSkuInfoById_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size162 = 0;
            $_ktype163 = 0;
            $_vtype164 = 0;
            $xfer += $input->readMapBegin($_ktype163, $_vtype164, $_size162);
            for ($_i166 = 0; $_i166 < $_size162; ++$_i166)
            {
              $key167 = '';
              $val168 = '';
              $xfer += $input->readString($key167);
              $xfer += $input->readString($val168);
              $this->success[$key167] = $val168;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getSkuInfoById_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter169 => $viter170)
          {
            $xfer += $output->writeString($kiter169);
            $xfer += $output->writeString($viter170);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getItemByCourses_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $coursesId = null;
  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'coursesId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['coursesId'])) {
        $this->coursesId = $vals['coursesId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getItemByCourses_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->coursesId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getItemByCourses_args');
    if ($this->coursesId !== null) {
      $xfer += $output->writeFieldBegin('coursesId', TType::I32, 1);
      $xfer += $output->writeI32($this->coursesId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getItemByCourses_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getItemByCourses_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size171 = 0;
            $_ktype172 = 0;
            $_vtype173 = 0;
            $xfer += $input->readMapBegin($_ktype172, $_vtype173, $_size171);
            for ($_i175 = 0; $_i175 < $_size171; ++$_i175)
            {
              $key176 = '';
              $val177 = '';
              $xfer += $input->readString($key176);
              $xfer += $input->readString($val177);
              $this->success[$key176] = $val177;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getItemByCourses_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter178 => $viter179)
          {
            $xfer += $output->writeString($kiter178);
            $xfer += $output->writeString($viter179);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getItemByActivity_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $activityId = null;
  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'activityId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['activityId'])) {
        $this->activityId = $vals['activityId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getItemByActivity_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->activityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getItemByActivity_args');
    if ($this->activityId !== null) {
      $xfer += $output->writeFieldBegin('activityId', TType::I32, 1);
      $xfer += $output->writeI32($this->activityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getItemByActivity_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getItemByActivity_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size180 = 0;
            $_ktype181 = 0;
            $_vtype182 = 0;
            $xfer += $input->readMapBegin($_ktype181, $_vtype182, $_size180);
            for ($_i184 = 0; $_i184 < $_size180; ++$_i184)
            {
              $key185 = '';
              $val186 = '';
              $xfer += $input->readString($key185);
              $xfer += $input->readString($val186);
              $this->success[$key185] = $val186;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getItemByActivity_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter187 => $viter188)
          {
            $xfer += $output->writeString($kiter187);
            $xfer += $output->writeString($viter188);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getItemAndPropByActivity_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $activityId = null;
  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'activityId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['activityId'])) {
        $this->activityId = $vals['activityId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getItemAndPropByActivity_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->activityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getItemAndPropByActivity_args');
    if ($this->activityId !== null) {
      $xfer += $output->writeFieldBegin('activityId', TType::I32, 1);
      $xfer += $output->writeI32($this->activityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getItemAndPropByActivity_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getItemAndPropByActivity_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size189 = 0;
            $_ktype190 = 0;
            $_vtype191 = 0;
            $xfer += $input->readMapBegin($_ktype190, $_vtype191, $_size189);
            for ($_i193 = 0; $_i193 < $_size189; ++$_i193)
            {
              $key194 = '';
              $val195 = '';
              $xfer += $input->readString($key194);
              $xfer += $input->readString($val195);
              $this->success[$key194] = $val195;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getItemAndPropByActivity_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter196 => $viter197)
          {
            $xfer += $output->writeString($kiter196);
            $xfer += $output->writeString($viter197);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getItemPropValueListByVids_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $vids = null;
  /**
   * @var array
   */
  public $pidNameArray = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vids',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'pidNameArray',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['vids'])) {
        $this->vids = $vals['vids'];
      }
      if (isset($vals['pidNameArray'])) {
        $this->pidNameArray = $vals['pidNameArray'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getItemPropValueListByVids_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->vids);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->pidNameArray = array();
            $_size198 = 0;
            $_ktype199 = 0;
            $_vtype200 = 0;
            $xfer += $input->readMapBegin($_ktype199, $_vtype200, $_size198);
            for ($_i202 = 0; $_i202 < $_size198; ++$_i202)
            {
              $key203 = '';
              $val204 = '';
              $xfer += $input->readString($key203);
              $xfer += $input->readString($val204);
              $this->pidNameArray[$key203] = $val204;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getItemPropValueListByVids_args');
    if ($this->vids !== null) {
      $xfer += $output->writeFieldBegin('vids', TType::STRING, 1);
      $xfer += $output->writeString($this->vids);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pidNameArray !== null) {
      if (!is_array($this->pidNameArray)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('pidNameArray', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->pidNameArray));
        {
          foreach ($this->pidNameArray as $kiter205 => $viter206)
          {
            $xfer += $output->writeString($kiter205);
            $xfer += $output->writeString($viter206);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getItemPropValueListByVids_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getItemPropValueListByVids_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size207 = 0;
            $_ktype208 = 0;
            $_vtype209 = 0;
            $xfer += $input->readMapBegin($_ktype208, $_vtype209, $_size207);
            for ($_i211 = 0; $_i211 < $_size207; ++$_i211)
            {
              $key212 = '';
              $val213 = '';
              $xfer += $input->readString($key212);
              $xfer += $input->readString($val213);
              $this->success[$key212] = $val213;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getItemPropValueListByVids_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter214 => $viter215)
          {
            $xfer += $output->writeString($kiter214);
            $xfer += $output->writeString($viter215);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getItemPropBeanList_args {
  static $_TSPEC;

  /**
   * @var array
   */
  public $fasthand_item_propArray = null;
  /**
   * @var array
   */
  public $fasthandItemPropValueBeanArray = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fasthand_item_propArray',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'fasthandItemPropValueBeanArray',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fasthand_item_propArray'])) {
        $this->fasthand_item_propArray = $vals['fasthand_item_propArray'];
      }
      if (isset($vals['fasthandItemPropValueBeanArray'])) {
        $this->fasthandItemPropValueBeanArray = $vals['fasthandItemPropValueBeanArray'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getItemPropBeanList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->fasthand_item_propArray = array();
            $_size216 = 0;
            $_ktype217 = 0;
            $_vtype218 = 0;
            $xfer += $input->readMapBegin($_ktype217, $_vtype218, $_size216);
            for ($_i220 = 0; $_i220 < $_size216; ++$_i220)
            {
              $key221 = '';
              $val222 = '';
              $xfer += $input->readString($key221);
              $xfer += $input->readString($val222);
              $this->fasthand_item_propArray[$key221] = $val222;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->fasthandItemPropValueBeanArray = array();
            $_size223 = 0;
            $_ktype224 = 0;
            $_vtype225 = 0;
            $xfer += $input->readMapBegin($_ktype224, $_vtype225, $_size223);
            for ($_i227 = 0; $_i227 < $_size223; ++$_i227)
            {
              $key228 = '';
              $val229 = '';
              $xfer += $input->readString($key228);
              $xfer += $input->readString($val229);
              $this->fasthandItemPropValueBeanArray[$key228] = $val229;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getItemPropBeanList_args');
    if ($this->fasthand_item_propArray !== null) {
      if (!is_array($this->fasthand_item_propArray)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fasthand_item_propArray', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->fasthand_item_propArray));
        {
          foreach ($this->fasthand_item_propArray as $kiter230 => $viter231)
          {
            $xfer += $output->writeString($kiter230);
            $xfer += $output->writeString($viter231);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fasthandItemPropValueBeanArray !== null) {
      if (!is_array($this->fasthandItemPropValueBeanArray)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fasthandItemPropValueBeanArray', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->fasthandItemPropValueBeanArray));
        {
          foreach ($this->fasthandItemPropValueBeanArray as $kiter232 => $viter233)
          {
            $xfer += $output->writeString($kiter232);
            $xfer += $output->writeString($viter233);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getItemPropBeanList_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getItemPropBeanList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size234 = 0;
            $_ktype235 = 0;
            $_vtype236 = 0;
            $xfer += $input->readMapBegin($_ktype235, $_vtype236, $_size234);
            for ($_i238 = 0; $_i238 < $_size234; ++$_i238)
            {
              $key239 = '';
              $val240 = '';
              $xfer += $input->readString($key239);
              $xfer += $input->readString($val240);
              $this->success[$key239] = $val240;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getItemPropBeanList_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter241 => $viter242)
          {
            $xfer += $output->writeString($kiter241);
            $xfer += $output->writeString($viter242);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getItemByTeacher_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $teacherId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'teacherId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['teacherId'])) {
        $this->teacherId = $vals['teacherId'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getItemByTeacher_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->teacherId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getItemByTeacher_args');
    if ($this->teacherId !== null) {
      $xfer += $output->writeFieldBegin('teacherId', TType::I32, 1);
      $xfer += $output->writeI32($this->teacherId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getItemByTeacher_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getItemByTeacher_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size243 = 0;
            $_ktype244 = 0;
            $_vtype245 = 0;
            $xfer += $input->readMapBegin($_ktype244, $_vtype245, $_size243);
            for ($_i247 = 0; $_i247 < $_size243; ++$_i247)
            {
              $key248 = '';
              $val249 = '';
              $xfer += $input->readString($key248);
              $xfer += $input->readString($val249);
              $this->success[$key248] = $val249;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getItemByTeacher_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter250 => $viter251)
          {
            $xfer += $output->writeString($kiter250);
            $xfer += $output->writeString($viter251);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getPayPrice_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $event_id = null;
  /**
   * @var string
   */
  public $type = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $number = null;
  /**
   * @var int
   */
  public $promotion_id = null;
  /**
   * @var double
   */
  public $discount_rate = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'event_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'number',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'promotion_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'discount_rate',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['event_id'])) {
        $this->event_id = $vals['event_id'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['number'])) {
        $this->number = $vals['number'];
      }
      if (isset($vals['promotion_id'])) {
        $this->promotion_id = $vals['promotion_id'];
      }
      if (isset($vals['discount_rate'])) {
        $this->discount_rate = $vals['discount_rate'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getPayPrice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->event_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->promotion_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->discount_rate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getPayPrice_args');
    if ($this->event_id !== null) {
      $xfer += $output->writeFieldBegin('event_id', TType::I32, 1);
      $xfer += $output->writeI32($this->event_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 2);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 3);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number !== null) {
      $xfer += $output->writeFieldBegin('number', TType::I32, 4);
      $xfer += $output->writeI32($this->number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promotion_id !== null) {
      $xfer += $output->writeFieldBegin('promotion_id', TType::I32, 5);
      $xfer += $output->writeI32($this->promotion_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->discount_rate !== null) {
      $xfer += $output->writeFieldBegin('discount_rate', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->discount_rate);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getPayPrice_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getPayPrice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size252 = 0;
            $_ktype253 = 0;
            $_vtype254 = 0;
            $xfer += $input->readMapBegin($_ktype253, $_vtype254, $_size252);
            for ($_i256 = 0; $_i256 < $_size252; ++$_i256)
            {
              $key257 = '';
              $val258 = '';
              $xfer += $input->readString($key257);
              $xfer += $input->readString($val258);
              $this->success[$key257] = $val258;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getPayPrice_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter259 => $viter260)
          {
            $xfer += $output->writeString($kiter259);
            $xfer += $output->writeString($viter260);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getSkuPayPrice_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $event_id = null;
  /**
   * @var string
   */
  public $type = null;
  /**
   * @var int
   */
  public $sku_id = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $number = null;
  /**
   * @var int
   */
  public $promotion_id = null;
  /**
   * @var double
   */
  public $discount_rate = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'event_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'sku_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'number',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'promotion_id',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'discount_rate',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['event_id'])) {
        $this->event_id = $vals['event_id'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['sku_id'])) {
        $this->sku_id = $vals['sku_id'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['number'])) {
        $this->number = $vals['number'];
      }
      if (isset($vals['promotion_id'])) {
        $this->promotion_id = $vals['promotion_id'];
      }
      if (isset($vals['discount_rate'])) {
        $this->discount_rate = $vals['discount_rate'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getSkuPayPrice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->event_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sku_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->promotion_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->discount_rate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getSkuPayPrice_args');
    if ($this->event_id !== null) {
      $xfer += $output->writeFieldBegin('event_id', TType::I32, 1);
      $xfer += $output->writeI32($this->event_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 2);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sku_id !== null) {
      $xfer += $output->writeFieldBegin('sku_id', TType::I32, 3);
      $xfer += $output->writeI32($this->sku_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 4);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number !== null) {
      $xfer += $output->writeFieldBegin('number', TType::I32, 5);
      $xfer += $output->writeI32($this->number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promotion_id !== null) {
      $xfer += $output->writeFieldBegin('promotion_id', TType::I32, 6);
      $xfer += $output->writeI32($this->promotion_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->discount_rate !== null) {
      $xfer += $output->writeFieldBegin('discount_rate', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->discount_rate);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getSkuPayPrice_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getSkuPayPrice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size261 = 0;
            $_ktype262 = 0;
            $_vtype263 = 0;
            $xfer += $input->readMapBegin($_ktype262, $_vtype263, $_size261);
            for ($_i265 = 0; $_i265 < $_size261; ++$_i265)
            {
              $key266 = '';
              $val267 = '';
              $xfer += $input->readString($key266);
              $xfer += $input->readString($val267);
              $this->success[$key266] = $val267;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getSkuPayPrice_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter268 => $viter269)
          {
            $xfer += $output->writeString($kiter268);
            $xfer += $output->writeString($viter269);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getActivityPayPrice_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $event_id = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var int
   */
  public $promotion_id = null;
  /**
   * @var int
   */
  public $adult_num = null;
  /**
   * @var int
   */
  public $child_num = null;
  /**
   * @var int
   */
  public $package_num = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'event_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'promotion_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'adult_num',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'child_num',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'package_num',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['event_id'])) {
        $this->event_id = $vals['event_id'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['promotion_id'])) {
        $this->promotion_id = $vals['promotion_id'];
      }
      if (isset($vals['adult_num'])) {
        $this->adult_num = $vals['adult_num'];
      }
      if (isset($vals['child_num'])) {
        $this->child_num = $vals['child_num'];
      }
      if (isset($vals['package_num'])) {
        $this->package_num = $vals['package_num'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getActivityPayPrice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->event_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->promotion_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->adult_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->child_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->package_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getActivityPayPrice_args');
    if ($this->event_id !== null) {
      $xfer += $output->writeFieldBegin('event_id', TType::I32, 1);
      $xfer += $output->writeI32($this->event_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->promotion_id !== null) {
      $xfer += $output->writeFieldBegin('promotion_id', TType::I32, 3);
      $xfer += $output->writeI32($this->promotion_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->adult_num !== null) {
      $xfer += $output->writeFieldBegin('adult_num', TType::I32, 4);
      $xfer += $output->writeI32($this->adult_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->child_num !== null) {
      $xfer += $output->writeFieldBegin('child_num', TType::I32, 5);
      $xfer += $output->writeI32($this->child_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->package_num !== null) {
      $xfer += $output->writeFieldBegin('package_num', TType::I32, 6);
      $xfer += $output->writeI32($this->package_num);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getActivityPayPrice_result {
  static $_TSPEC;

  /**
   * @var double
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getActivityPayPrice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getActivityPayPrice_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::DOUBLE, 0);
      $xfer += $output->writeDouble($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getActivityPackageSizeById_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getActivityPackageSizeById_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getActivityPackageSizeById_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getActivityPackageSizeById_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getActivityPackageSizeById_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getActivityPackageSizeById_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_payOrderByIncome_args {
  static $_TSPEC;

  /**
   * @var array
   */
  public $fasthand_order = null;
  /**
   * @var array
   */
  public $fasthand_user = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fasthand_order',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'fasthand_user',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fasthand_order'])) {
        $this->fasthand_order = $vals['fasthand_order'];
      }
      if (isset($vals['fasthand_user'])) {
        $this->fasthand_user = $vals['fasthand_user'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'OrderService_payOrderByIncome_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->fasthand_order = array();
            $_size270 = 0;
            $_ktype271 = 0;
            $_vtype272 = 0;
            $xfer += $input->readMapBegin($_ktype271, $_vtype272, $_size270);
            for ($_i274 = 0; $_i274 < $_size270; ++$_i274)
            {
              $key275 = '';
              $val276 = '';
              $xfer += $input->readString($key275);
              $xfer += $input->readString($val276);
              $this->fasthand_order[$key275] = $val276;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->fasthand_user = array();
            $_size277 = 0;
            $_ktype278 = 0;
            $_vtype279 = 0;
            $xfer += $input->readMapBegin($_ktype278, $_vtype279, $_size277);
            for ($_i281 = 0; $_i281 < $_size277; ++$_i281)
            {
              $key282 = '';
              $val283 = '';
              $xfer += $input->readString($key282);
              $xfer += $input->readString($val283);
              $this->fasthand_user[$key282] = $val283;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_payOrderByIncome_args');
    if ($this->fasthand_order !== null) {
      if (!is_array($this->fasthand_order)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fasthand_order', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->fasthand_order));
        {
          foreach ($this->fasthand_order as $kiter284 => $viter285)
          {
            $xfer += $output->writeString($kiter284);
            $xfer += $output->writeString($viter285);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fasthand_user !== null) {
      if (!is_array($this->fasthand_user)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fasthand_user', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->fasthand_user));
        {
          foreach ($this->fasthand_user as $kiter286 => $viter287)
          {
            $xfer += $output->writeString($kiter286);
            $xfer += $output->writeString($viter287);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 3);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_payOrderByIncome_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_payOrderByIncome_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_payOrderByIncome_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_receivePromotion_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $promotionId = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var string
   */
  public $mobile = null;
  /**
   * @var string
   */
  public $end_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'promotionId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'end_time',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['promotionId'])) {
        $this->promotionId = $vals['promotionId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['end_time'])) {
        $this->end_time = $vals['end_time'];
      }
    }
  }

  public function getName() {
    return 'OrderService_receivePromotion_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->promotionId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->end_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_receivePromotion_args');
    if ($this->promotionId !== null) {
      $xfer += $output->writeFieldBegin('promotionId', TType::I32, 1);
      $xfer += $output->writeI32($this->promotionId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 2);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 3);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->end_time !== null) {
      $xfer += $output->writeFieldBegin('end_time', TType::STRING, 4);
      $xfer += $output->writeString($this->end_time);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_receivePromotion_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OrderService_receivePromotion_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_receivePromotion_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_payOrderSuccessEvent_args {
  static $_TSPEC;

  /**
   * @var array
   */
  public $fasthand_order = null;
  /**
   * @var int
   */
  public $number = null;
  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fasthand_order',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'number',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fasthand_order'])) {
        $this->fasthand_order = $vals['fasthand_order'];
      }
      if (isset($vals['number'])) {
        $this->number = $vals['number'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'OrderService_payOrderSuccessEvent_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->fasthand_order = array();
            $_size288 = 0;
            $_ktype289 = 0;
            $_vtype290 = 0;
            $xfer += $input->readMapBegin($_ktype289, $_vtype290, $_size288);
            for ($_i292 = 0; $_i292 < $_size288; ++$_i292)
            {
              $key293 = '';
              $val294 = '';
              $xfer += $input->readString($key293);
              $xfer += $input->readString($val294);
              $this->fasthand_order[$key293] = $val294;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->number);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_payOrderSuccessEvent_args');
    if ($this->fasthand_order !== null) {
      if (!is_array($this->fasthand_order)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fasthand_order', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->fasthand_order));
        {
          foreach ($this->fasthand_order as $kiter295 => $viter296)
          {
            $xfer += $output->writeString($kiter295);
            $xfer += $output->writeString($viter296);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->number !== null) {
      $xfer += $output->writeFieldBegin('number', TType::I32, 2);
      $xfer += $output->writeI32($this->number);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 3);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_payOrderSuccessEvent_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OrderService_payOrderSuccessEvent_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_payOrderSuccessEvent_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getInstitutionDiscountRate_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $coursesId = null;
  /**
   * @var array
   */
  public $fasthand_institution = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'coursesId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'fasthand_institution',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['coursesId'])) {
        $this->coursesId = $vals['coursesId'];
      }
      if (isset($vals['fasthand_institution'])) {
        $this->fasthand_institution = $vals['fasthand_institution'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getInstitutionDiscountRate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->coursesId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::MAP) {
            $this->fasthand_institution = array();
            $_size297 = 0;
            $_ktype298 = 0;
            $_vtype299 = 0;
            $xfer += $input->readMapBegin($_ktype298, $_vtype299, $_size297);
            for ($_i301 = 0; $_i301 < $_size297; ++$_i301)
            {
              $key302 = '';
              $val303 = '';
              $xfer += $input->readString($key302);
              $xfer += $input->readString($val303);
              $this->fasthand_institution[$key302] = $val303;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getInstitutionDiscountRate_args');
    if ($this->coursesId !== null) {
      $xfer += $output->writeFieldBegin('coursesId', TType::I32, 1);
      $xfer += $output->writeI32($this->coursesId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fasthand_institution !== null) {
      if (!is_array($this->fasthand_institution)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fasthand_institution', TType::MAP, 2);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->fasthand_institution));
        {
          foreach ($this->fasthand_institution as $kiter304 => $viter305)
          {
            $xfer += $output->writeString($kiter304);
            $xfer += $output->writeString($viter305);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_getInstitutionDiscountRate_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_getInstitutionDiscountRate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size306 = 0;
            $_ktype307 = 0;
            $_vtype308 = 0;
            $xfer += $input->readMapBegin($_ktype307, $_vtype308, $_size306);
            for ($_i310 = 0; $_i310 < $_size306; ++$_i310)
            {
              $key311 = '';
              $val312 = '';
              $xfer += $input->readString($key311);
              $xfer += $input->readString($val312);
              $this->success[$key311] = $val312;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_getInstitutionDiscountRate_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter313 => $viter314)
          {
            $xfer += $output->writeString($kiter313);
            $xfer += $output->writeString($viter314);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_ajaxCheckOrder_args {
  static $_TSPEC;

  /**
   * @var array
   */
  public $paramArray = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'paramArray',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['paramArray'])) {
        $this->paramArray = $vals['paramArray'];
      }
    }
  }

  public function getName() {
    return 'OrderService_ajaxCheckOrder_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->paramArray = array();
            $_size315 = 0;
            $_ktype316 = 0;
            $_vtype317 = 0;
            $xfer += $input->readMapBegin($_ktype316, $_vtype317, $_size315);
            for ($_i319 = 0; $_i319 < $_size315; ++$_i319)
            {
              $key320 = '';
              $val321 = '';
              $xfer += $input->readString($key320);
              $xfer += $input->readString($val321);
              $this->paramArray[$key320] = $val321;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_ajaxCheckOrder_args');
    if ($this->paramArray !== null) {
      if (!is_array($this->paramArray)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('paramArray', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->paramArray));
        {
          foreach ($this->paramArray as $kiter322 => $viter323)
          {
            $xfer += $output->writeString($kiter322);
            $xfer += $output->writeString($viter323);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_ajaxCheckOrder_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_ajaxCheckOrder_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size324 = 0;
            $_ktype325 = 0;
            $_vtype326 = 0;
            $xfer += $input->readMapBegin($_ktype325, $_vtype326, $_size324);
            for ($_i328 = 0; $_i328 < $_size324; ++$_i328)
            {
              $key329 = '';
              $val330 = '';
              $xfer += $input->readString($key329);
              $xfer += $input->readString($val330);
              $this->success[$key329] = $val330;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_ajaxCheckOrder_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter331 => $viter332)
          {
            $xfer += $output->writeString($kiter331);
            $xfer += $output->writeString($viter332);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_createOrder_args {
  static $_TSPEC;

  /**
   * @var array
   */
  public $paramArray = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'paramArray',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['paramArray'])) {
        $this->paramArray = $vals['paramArray'];
      }
    }
  }

  public function getName() {
    return 'OrderService_createOrder_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->paramArray = array();
            $_size333 = 0;
            $_ktype334 = 0;
            $_vtype335 = 0;
            $xfer += $input->readMapBegin($_ktype334, $_vtype335, $_size333);
            for ($_i337 = 0; $_i337 < $_size333; ++$_i337)
            {
              $key338 = '';
              $val339 = '';
              $xfer += $input->readString($key338);
              $xfer += $input->readString($val339);
              $this->paramArray[$key338] = $val339;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_createOrder_args');
    if ($this->paramArray !== null) {
      if (!is_array($this->paramArray)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('paramArray', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->paramArray));
        {
          foreach ($this->paramArray as $kiter340 => $viter341)
          {
            $xfer += $output->writeString($kiter340);
            $xfer += $output->writeString($viter341);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_createOrder_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_createOrder_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size342 = 0;
            $_ktype343 = 0;
            $_vtype344 = 0;
            $xfer += $input->readMapBegin($_ktype343, $_vtype344, $_size342);
            for ($_i346 = 0; $_i346 < $_size342; ++$_i346)
            {
              $key347 = '';
              $val348 = '';
              $xfer += $input->readString($key347);
              $xfer += $input->readString($val348);
              $this->success[$key347] = $val348;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_createOrder_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter349 => $viter350)
          {
            $xfer += $output->writeString($kiter349);
            $xfer += $output->writeString($viter350);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_closeOrder_args {
  static $_TSPEC;

  /**
   * @var array
   */
  public $paramArray = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'paramArray',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['paramArray'])) {
        $this->paramArray = $vals['paramArray'];
      }
    }
  }

  public function getName() {
    return 'OrderService_closeOrder_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->paramArray = array();
            $_size351 = 0;
            $_ktype352 = 0;
            $_vtype353 = 0;
            $xfer += $input->readMapBegin($_ktype352, $_vtype353, $_size351);
            for ($_i355 = 0; $_i355 < $_size351; ++$_i355)
            {
              $key356 = '';
              $val357 = '';
              $xfer += $input->readString($key356);
              $xfer += $input->readString($val357);
              $this->paramArray[$key356] = $val357;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_closeOrder_args');
    if ($this->paramArray !== null) {
      if (!is_array($this->paramArray)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('paramArray', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->paramArray));
        {
          foreach ($this->paramArray as $kiter358 => $viter359)
          {
            $xfer += $output->writeString($kiter358);
            $xfer += $output->writeString($viter359);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_closeOrder_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_closeOrder_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size360 = 0;
            $_ktype361 = 0;
            $_vtype362 = 0;
            $xfer += $input->readMapBegin($_ktype361, $_vtype362, $_size360);
            for ($_i364 = 0; $_i364 < $_size360; ++$_i364)
            {
              $key365 = '';
              $val366 = '';
              $xfer += $input->readString($key365);
              $xfer += $input->readString($val366);
              $this->success[$key365] = $val366;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_closeOrder_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter367 => $viter368)
          {
            $xfer += $output->writeString($kiter367);
            $xfer += $output->writeString($viter368);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_mGetCoursesInfoById_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'OrderService_mGetCoursesInfoById_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_mGetCoursesInfoById_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_mGetCoursesInfoById_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_mGetCoursesInfoById_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size369 = 0;
            $_ktype370 = 0;
            $_vtype371 = 0;
            $xfer += $input->readMapBegin($_ktype370, $_vtype371, $_size369);
            for ($_i373 = 0; $_i373 < $_size369; ++$_i373)
            {
              $key374 = '';
              $val375 = '';
              $xfer += $input->readString($key374);
              $xfer += $input->readString($val375);
              $this->success[$key374] = $val375;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_mGetCoursesInfoById_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter376 => $viter377)
          {
            $xfer += $output->writeString($kiter376);
            $xfer += $output->writeString($viter377);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_mGetActivityInfoById_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'OrderService_mGetActivityInfoById_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_mGetActivityInfoById_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_mGetActivityInfoById_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_mGetActivityInfoById_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size378 = 0;
            $_ktype379 = 0;
            $_vtype380 = 0;
            $xfer += $input->readMapBegin($_ktype379, $_vtype380, $_size378);
            for ($_i382 = 0; $_i382 < $_size378; ++$_i382)
            {
              $key383 = '';
              $val384 = '';
              $xfer += $input->readString($key383);
              $xfer += $input->readString($val384);
              $this->success[$key383] = $val384;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_mGetActivityInfoById_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter385 => $viter386)
          {
            $xfer += $output->writeString($kiter385);
            $xfer += $output->writeString($viter386);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_mGetInstitutionInfoById_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'OrderService_mGetInstitutionInfoById_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_mGetInstitutionInfoById_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_mGetInstitutionInfoById_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_mGetInstitutionInfoById_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size387 = 0;
            $_ktype388 = 0;
            $_vtype389 = 0;
            $xfer += $input->readMapBegin($_ktype388, $_vtype389, $_size387);
            for ($_i391 = 0; $_i391 < $_size387; ++$_i391)
            {
              $key392 = '';
              $val393 = '';
              $xfer += $input->readString($key392);
              $xfer += $input->readString($val393);
              $this->success[$key392] = $val393;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_mGetInstitutionInfoById_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter394 => $viter395)
          {
            $xfer += $output->writeString($kiter394);
            $xfer += $output->writeString($viter395);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_mGetInstitutionTeacherInfoById_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'OrderService_mGetInstitutionTeacherInfoById_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_mGetInstitutionTeacherInfoById_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_mGetInstitutionTeacherInfoById_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_mGetInstitutionTeacherInfoById_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size396 = 0;
            $_ktype397 = 0;
            $_vtype398 = 0;
            $xfer += $input->readMapBegin($_ktype397, $_vtype398, $_size396);
            for ($_i400 = 0; $_i400 < $_size396; ++$_i400)
            {
              $key401 = '';
              $val402 = '';
              $xfer += $input->readString($key401);
              $xfer += $input->readString($val402);
              $this->success[$key401] = $val402;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_mGetInstitutionTeacherInfoById_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter403 => $viter404)
          {
            $xfer += $output->writeString($kiter403);
            $xfer += $output->writeString($viter404);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_mGetTeacherInfoById_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'OrderService_mGetTeacherInfoById_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_mGetTeacherInfoById_args');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_mGetTeacherInfoById_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_mGetTeacherInfoById_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size405 = 0;
            $_ktype406 = 0;
            $_vtype407 = 0;
            $xfer += $input->readMapBegin($_ktype406, $_vtype407, $_size405);
            for ($_i409 = 0; $_i409 < $_size405; ++$_i409)
            {
              $key410 = '';
              $val411 = '';
              $xfer += $input->readString($key410);
              $xfer += $input->readString($val411);
              $this->success[$key410] = $val411;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_mGetTeacherInfoById_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter412 => $viter413)
          {
            $xfer += $output->writeString($kiter412);
            $xfer += $output->writeString($viter413);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_mGetPublicUserInfo_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
    }
  }

  public function getName() {
    return 'OrderService_mGetPublicUserInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_mGetPublicUserInfo_args');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_mGetPublicUserInfo_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_mGetPublicUserInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size414 = 0;
            $_ktype415 = 0;
            $_vtype416 = 0;
            $xfer += $input->readMapBegin($_ktype415, $_vtype416, $_size414);
            for ($_i418 = 0; $_i418 < $_size414; ++$_i418)
            {
              $key419 = '';
              $val420 = '';
              $xfer += $input->readString($key419);
              $xfer += $input->readString($val420);
              $this->success[$key419] = $val420;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_mGetPublicUserInfo_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter421 => $viter422)
          {
            $xfer += $output->writeString($kiter421);
            $xfer += $output->writeString($viter422);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_mGetNotAllowPromotionList_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OrderService_mGetNotAllowPromotionList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_mGetNotAllowPromotionList_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_mGetNotAllowPromotionList_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_mGetNotAllowPromotionList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size423 = 0;
            $_ktype424 = 0;
            $_vtype425 = 0;
            $xfer += $input->readMapBegin($_ktype424, $_vtype425, $_size423);
            for ($_i427 = 0; $_i427 < $_size423; ++$_i427)
            {
              $key428 = '';
              $val429 = '';
              $xfer += $input->readString($key428);
              $xfer += $input->readString($val429);
              $this->success[$key428] = $val429;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_mGetNotAllowPromotionList_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter430 => $viter431)
          {
            $xfer += $output->writeString($kiter430);
            $xfer += $output->writeString($viter431);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_mGetItemPropDoListByPids_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $pids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pids',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['pids'])) {
        $this->pids = $vals['pids'];
      }
    }
  }

  public function getName() {
    return 'OrderService_mGetItemPropDoListByPids_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pids);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_mGetItemPropDoListByPids_args');
    if ($this->pids !== null) {
      $xfer += $output->writeFieldBegin('pids', TType::STRING, 1);
      $xfer += $output->writeString($this->pids);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_mGetItemPropDoListByPids_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_mGetItemPropDoListByPids_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size432 = 0;
            $_ktype433 = 0;
            $_vtype434 = 0;
            $xfer += $input->readMapBegin($_ktype433, $_vtype434, $_size432);
            for ($_i436 = 0; $_i436 < $_size432; ++$_i436)
            {
              $key437 = '';
              $val438 = '';
              $xfer += $input->readString($key437);
              $xfer += $input->readString($val438);
              $this->success[$key437] = $val438;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_mGetItemPropDoListByPids_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter439 => $viter440)
          {
            $xfer += $output->writeString($kiter439);
            $xfer += $output->writeString($viter440);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_orderEvent_args {
  static $_TSPEC;

  /**
   * @var array
   */
  public $fasthand_order = null;
  /**
   * @var int
   */
  public $seller_user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fasthand_order',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'seller_user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fasthand_order'])) {
        $this->fasthand_order = $vals['fasthand_order'];
      }
      if (isset($vals['seller_user_id'])) {
        $this->seller_user_id = $vals['seller_user_id'];
      }
    }
  }

  public function getName() {
    return 'OrderService_orderEvent_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::MAP) {
            $this->fasthand_order = array();
            $_size441 = 0;
            $_ktype442 = 0;
            $_vtype443 = 0;
            $xfer += $input->readMapBegin($_ktype442, $_vtype443, $_size441);
            for ($_i445 = 0; $_i445 < $_size441; ++$_i445)
            {
              $key446 = '';
              $val447 = '';
              $xfer += $input->readString($key446);
              $xfer += $input->readString($val447);
              $this->fasthand_order[$key446] = $val447;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->seller_user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_orderEvent_args');
    if ($this->fasthand_order !== null) {
      if (!is_array($this->fasthand_order)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('fasthand_order', TType::MAP, 1);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->fasthand_order));
        {
          foreach ($this->fasthand_order as $kiter448 => $viter449)
          {
            $xfer += $output->writeString($kiter448);
            $xfer += $output->writeString($viter449);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->seller_user_id !== null) {
      $xfer += $output->writeFieldBegin('seller_user_id', TType::I32, 2);
      $xfer += $output->writeI32($this->seller_user_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderService_orderEvent_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'OrderService_orderEvent_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderService_orderEvent_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderServiceProcessor {
  protected $handler_ = null;
  public function __construct($handler) {
    $this->handler_ = $handler;
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_OrderService($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_OrderService_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_OrderService_result();
    $this->handler_->OrderService();
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'OrderService', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('OrderService', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_addOrderHistory($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_addOrderHistory_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_addOrderHistory_result();
    $this->handler_->addOrderHistory($args->fasthand_order);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'addOrderHistory', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('addOrderHistory', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updatePayNum($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_updatePayNum_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_updatePayNum_result();
    $this->handler_->updatePayNum($args->eventId, $args->eventType, $args->number);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updatePayNum', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updatePayNum', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_sendCheckSmsToSeller($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_sendCheckSmsToSeller_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_sendCheckSmsToSeller_result();
    $this->handler_->sendCheckSmsToSeller($args->event_id, $args->type, $args->order_id);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'sendCheckSmsToSeller', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('sendCheckSmsToSeller', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_sendCheckSmsToStudent($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_sendCheckSmsToStudent_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_sendCheckSmsToStudent_result();
    $this->handler_->sendCheckSmsToStudent($args->userId, $args->order_id, $args->integral_num);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'sendCheckSmsToStudent', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('sendCheckSmsToStudent', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_sendPaySmsToStudent($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_sendPaySmsToStudent_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_sendPaySmsToStudent_result();
    $this->handler_->sendPaySmsToStudent($args->fasthand_order);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'sendPaySmsToStudent', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('sendPaySmsToStudent', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_sendPaySmsToSeller($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_sendPaySmsToSeller_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_sendPaySmsToSeller_result();
    $this->handler_->sendPaySmsToSeller($args->fasthand_order, $args->friend_user_id);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'sendPaySmsToSeller', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('sendPaySmsToSeller', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updatePromotionStatus($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_updatePromotionStatus_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_updatePromotionStatus_result();
    $this->handler_->updatePromotionStatus($args->id, $args->status);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updatePromotionStatus', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updatePromotionStatus', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_mUpdatePromotionUseNum($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_mUpdatePromotionUseNum_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_mUpdatePromotionUseNum_result();
    $this->handler_->mUpdatePromotionUseNum($args->promotionId, $args->status);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'mUpdatePromotionUseNum', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('mUpdatePromotionUseNum', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_sendNotPaySms($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_sendNotPaySms_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_sendNotPaySms_result();
    $this->handler_->sendNotPaySms($args->userId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'sendNotPaySms', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('sendNotPaySms', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_sendNotPayMessage($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_sendNotPayMessage_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_sendNotPayMessage_result();
    $this->handler_->sendNotPayMessage($args->user_id, $args->event_id, $args->type);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'sendNotPayMessage', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('sendNotPayMessage', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_checkAllowReceiveCouponByMobile($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_checkAllowReceiveCouponByMobile_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_checkAllowReceiveCouponByMobile_result();
    $result->success = $this->handler_->checkAllowReceiveCouponByMobile($args->mobile, $args->promotion_id, $args->fasthand_item_promotion, $args->user_id, $args->amount);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'checkAllowReceiveCouponByMobile', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('checkAllowReceiveCouponByMobile', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_checkAllowReceiveCouponByUserId($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_checkAllowReceiveCouponByUserId_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_checkAllowReceiveCouponByUserId_result();
    $result->success = $this->handler_->checkAllowReceiveCouponByUserId($args->userId, $args->promotion_id, $args->amount);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'checkAllowReceiveCouponByUserId', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('checkAllowReceiveCouponByUserId', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updatePromotionUserByRegister($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_updatePromotionUserByRegister_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_updatePromotionUserByRegister_result();
    $result->success = $this->handler_->updatePromotionUserByRegister($args->mobile, $args->userId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updatePromotionUserByRegister', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updatePromotionUserByRegister', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_checkPromotionStatus($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_checkPromotionStatus_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_checkPromotionStatus_result();
    $result->success = $this->handler_->checkPromotionStatus($args->my_promotion_id, $args->userId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'checkPromotionStatus', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('checkPromotionStatus', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_checkInventoryStatus($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_checkInventoryStatus_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_checkInventoryStatus_result();
    $result->success = $this->handler_->checkInventoryStatus($args->event_id, $args->type, $args->number, $args->itemOriginVo);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'checkInventoryStatus', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('checkInventoryStatus', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_checkSkuInventoryStatus($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_checkSkuInventoryStatus_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_checkSkuInventoryStatus_result();
    $result->success = $this->handler_->checkSkuInventoryStatus($args->event_id, $args->event_type, $args->sku_id, $args->number);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'checkSkuInventoryStatus', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('checkSkuInventoryStatus', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updateInventoryNumber($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_updateInventoryNumber_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_updateInventoryNumber_result();
    $result->success = $this->handler_->updateInventoryNumber($args->fasthand_order, $args->type);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updateInventoryNumber', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updateInventoryNumber', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_syncPromotionToItem($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_syncPromotionToItem_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_syncPromotionToItem_result();
    $this->handler_->syncPromotionToItem($args->event_id, $args->event_type, $args->type);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'syncPromotionToItem', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('syncPromotionToItem', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getPromotionUserId($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getPromotionUserId_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getPromotionUserId_result();
    $result->success = $this->handler_->getPromotionUserId($args->event_type, $args->event_id);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getPromotionUserId', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getPromotionUserId', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_addMessage($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_addMessage_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_addMessage_result();
    $result->success = $this->handler_->addMessage($args->city_id, $args->client_source, $args->content, $args->effective_time, $args->invalid_time, $args->message_type, $args->title, $args->userId, $args->userRole, $args->dataArray);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'addMessage', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('addMessage', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getPomotionInfoByItem($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getPomotionInfoByItem_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getPomotionInfoByItem_result();
    $result->success = $this->handler_->getPomotionInfoByItem($args->event_id, $args->event_type);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getPomotionInfoByItem', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getPomotionInfoByItem', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getItemSkuList($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getItemSkuList_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getItemSkuList_result();
    $result->success = $this->handler_->getItemSkuList($args->event_id, $args->event_type, $args->extendInfoArray);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getItemSkuList', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getItemSkuList', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_addSkuInfoByActivity($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_addSkuInfoByActivity_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_addSkuInfoByActivity_result();
    $result->success = $this->handler_->addSkuInfoByActivity($args->fasthand_activity);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'addSkuInfoByActivity', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('addSkuInfoByActivity', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getOrderIntegralNum($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getOrderIntegralNum_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getOrderIntegralNum_result();
    $result->success = $this->handler_->getOrderIntegralNum($args->userId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getOrderIntegralNum', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getOrderIntegralNum', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getOrderIntegralConvertPrice($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getOrderIntegralConvertPrice_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getOrderIntegralConvertPrice_result();
    $result->success = $this->handler_->getOrderIntegralConvertPrice($args->userId, $args->item_price, $args->integral_num);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getOrderIntegralConvertPrice', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getOrderIntegralConvertPrice', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_transcodeCertificatesToDescribes($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_transcodeCertificatesToDescribes_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_transcodeCertificatesToDescribes_result();
    $result->success = $this->handler_->transcodeCertificatesToDescribes($args->certificates);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'transcodeCertificatesToDescribes', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('transcodeCertificatesToDescribes', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getPromotionPrice($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getPromotionPrice_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getPromotionPrice_result();
    $result->success = $this->handler_->getPromotionPrice($args->type, $args->price, $args->amount);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getPromotionPrice', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getPromotionPrice', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getPriceByDiscountRate($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getPriceByDiscountRate_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getPriceByDiscountRate_result();
    $result->success = $this->handler_->getPriceByDiscountRate($args->type, $args->promotionPrice, $args->amount);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getPriceByDiscountRate', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getPriceByDiscountRate', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getPropValueByProps($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getPropValueByProps_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getPropValueByProps_result();
    $this->handler_->getPropValueByProps($args->props, $args->pids, $args->vids);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getPropValueByProps', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getPropValueByProps', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getSkuPropValues($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getSkuPropValues_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getSkuPropValues_result();
    $result->success = $this->handler_->getSkuPropValues($args->sku_id);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getSkuPropValues', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getSkuPropValues', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_createItemSnapshotObject($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_createItemSnapshotObject_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_createItemSnapshotObject_result();
    $result->success = $this->handler_->createItemSnapshotObject($args->request, $args->seller_id, $args->seller_user_id);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'createItemSnapshotObject', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('createItemSnapshotObject', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_updateActivityProps($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_updateActivityProps_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_updateActivityProps_result();
    $result->success = $this->handler_->updateActivityProps($args->id, $args->sku_id, $args->properties);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'updateActivityProps', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('updateActivityProps', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_createPropsBySkus($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_createPropsBySkus_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_createPropsBySkus_result();
    $result->success = $this->handler_->createPropsBySkus($args->fasthand_item_skuArray, $args->addProperties);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'createPropsBySkus', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('createPropsBySkus', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_checkPromotionReceiveStatus($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_checkPromotionReceiveStatus_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_checkPromotionReceiveStatus_result();
    $result->success = $this->handler_->checkPromotionReceiveStatus($args->userId, $args->event_id, $args->event_type);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'checkPromotionReceiveStatus', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('checkPromotionReceiveStatus', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_addConsumIncomeRecord($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_addConsumIncomeRecord_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_addConsumIncomeRecord_result();
    $result->success = $this->handler_->addConsumIncomeRecord($args->invite_code, $args->userId, $args->pay_amount, $args->event_id);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'addConsumIncomeRecord', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('addConsumIncomeRecord', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_checkInviteCodeStatus($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_checkInviteCodeStatus_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_checkInviteCodeStatus_result();
    $result->success = $this->handler_->checkInviteCodeStatus($args->invite_code, $args->userId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'checkInviteCodeStatus', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('checkInviteCodeStatus', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_addMyIncomeRecord($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_addMyIncomeRecord_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_addMyIncomeRecord_result();
    $result->success = $this->handler_->addMyIncomeRecord($args->userId, $args->amount, $args->title, $args->type, $args->origin_user_id, $args->status, $args->event_id, $args->event_type, $args->action, $args->fasthand_user);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'addMyIncomeRecord', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('addMyIncomeRecord', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_createConsumCode($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_createConsumCode_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_createConsumCode_result();
    $result->success = $this->handler_->createConsumCode($args->event_id, $args->event_type);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'createConsumCode', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('createConsumCode', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getPromotionList($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getPromotionList_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getPromotionList_result();
    $result->success = $this->handler_->getPromotionList($args->event_id, $args->event_type, $args->userId, $args->notType, $args->is_allow_promotion);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getPromotionList', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getPromotionList', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getMaxBuyNum($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getMaxBuyNum_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getMaxBuyNum_result();
    $result->success = $this->handler_->getMaxBuyNum($args->event_id, $args->event_type, $args->max_buy_num, $args->userId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getMaxBuyNum', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getMaxBuyNum', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_checkUserMaxBuyNum($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_checkUserMaxBuyNum_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_checkUserMaxBuyNum_result();
    $result->success = $this->handler_->checkUserMaxBuyNum($args->itemOriginVo, $args->event_id, $args->event_type, $args->userId, $args->number);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'checkUserMaxBuyNum', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('checkUserMaxBuyNum', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getItemOriginVo($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getItemOriginVo_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getItemOriginVo_result();
    $result->success = $this->handler_->getItemOriginVo($args->event_id, $args->type);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getItemOriginVo', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getItemOriginVo', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_checkIsDiscount($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_checkIsDiscount_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_checkIsDiscount_result();
    $result->success = $this->handler_->checkIsDiscount($args->fasthand_item_promotion, $args->pid);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'checkIsDiscount', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('checkIsDiscount', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getSkuInfoById($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getSkuInfoById_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getSkuInfoById_result();
    $result->success = $this->handler_->getSkuInfoById($args->sku_id);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getSkuInfoById', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getSkuInfoById', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getItemByCourses($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getItemByCourses_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getItemByCourses_result();
    $result->success = $this->handler_->getItemByCourses($args->coursesId, $args->userId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getItemByCourses', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getItemByCourses', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getItemByActivity($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getItemByActivity_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getItemByActivity_result();
    $result->success = $this->handler_->getItemByActivity($args->activityId, $args->userId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getItemByActivity', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getItemByActivity', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getItemAndPropByActivity($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getItemAndPropByActivity_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getItemAndPropByActivity_result();
    $result->success = $this->handler_->getItemAndPropByActivity($args->activityId, $args->userId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getItemAndPropByActivity', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getItemAndPropByActivity', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getItemPropValueListByVids($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getItemPropValueListByVids_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getItemPropValueListByVids_result();
    $result->success = $this->handler_->getItemPropValueListByVids($args->vids, $args->pidNameArray);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getItemPropValueListByVids', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getItemPropValueListByVids', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getItemPropBeanList($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getItemPropBeanList_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getItemPropBeanList_result();
    $result->success = $this->handler_->getItemPropBeanList($args->fasthand_item_propArray, $args->fasthandItemPropValueBeanArray);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getItemPropBeanList', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getItemPropBeanList', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getItemByTeacher($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getItemByTeacher_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getItemByTeacher_result();
    $result->success = $this->handler_->getItemByTeacher($args->teacherId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getItemByTeacher', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getItemByTeacher', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getPayPrice($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getPayPrice_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getPayPrice_result();
    $result->success = $this->handler_->getPayPrice($args->event_id, $args->type, $args->userId, $args->number, $args->promotion_id, $args->discount_rate);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getPayPrice', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getPayPrice', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getSkuPayPrice($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getSkuPayPrice_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getSkuPayPrice_result();
    $result->success = $this->handler_->getSkuPayPrice($args->event_id, $args->type, $args->sku_id, $args->userId, $args->number, $args->promotion_id, $args->discount_rate);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getSkuPayPrice', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getSkuPayPrice', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getActivityPayPrice($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getActivityPayPrice_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getActivityPayPrice_result();
    $result->success = $this->handler_->getActivityPayPrice($args->event_id, $args->userId, $args->promotion_id, $args->adult_num, $args->child_num, $args->package_num);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getActivityPayPrice', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getActivityPayPrice', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getActivityPackageSizeById($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getActivityPackageSizeById_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getActivityPackageSizeById_result();
    $result->success = $this->handler_->getActivityPackageSizeById($args->id);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getActivityPackageSizeById', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getActivityPackageSizeById', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_payOrderByIncome($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_payOrderByIncome_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_payOrderByIncome_result();
    $result->success = $this->handler_->payOrderByIncome($args->fasthand_order, $args->fasthand_user, $args->message);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'payOrderByIncome', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('payOrderByIncome', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_receivePromotion($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_receivePromotion_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_receivePromotion_result();
    $this->handler_->receivePromotion($args->promotionId, $args->userId, $args->mobile, $args->end_time);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'receivePromotion', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('receivePromotion', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_payOrderSuccessEvent($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_payOrderSuccessEvent_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_payOrderSuccessEvent_result();
    $this->handler_->payOrderSuccessEvent($args->fasthand_order, $args->number, $args->userId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'payOrderSuccessEvent', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('payOrderSuccessEvent', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getInstitutionDiscountRate($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_getInstitutionDiscountRate_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_getInstitutionDiscountRate_result();
    $result->success = $this->handler_->getInstitutionDiscountRate($args->coursesId, $args->fasthand_institution);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getInstitutionDiscountRate', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getInstitutionDiscountRate', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_ajaxCheckOrder($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_ajaxCheckOrder_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_ajaxCheckOrder_result();
    $result->success = $this->handler_->ajaxCheckOrder($args->paramArray);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'ajaxCheckOrder', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('ajaxCheckOrder', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_createOrder($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_createOrder_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_createOrder_result();
    $result->success = $this->handler_->createOrder($args->paramArray);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'createOrder', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('createOrder', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_closeOrder($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_closeOrder_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_closeOrder_result();
    $result->success = $this->handler_->closeOrder($args->paramArray);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'closeOrder', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('closeOrder', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_mGetCoursesInfoById($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_mGetCoursesInfoById_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_mGetCoursesInfoById_result();
    $result->success = $this->handler_->mGetCoursesInfoById($args->id);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'mGetCoursesInfoById', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('mGetCoursesInfoById', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_mGetActivityInfoById($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_mGetActivityInfoById_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_mGetActivityInfoById_result();
    $result->success = $this->handler_->mGetActivityInfoById($args->id);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'mGetActivityInfoById', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('mGetActivityInfoById', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_mGetInstitutionInfoById($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_mGetInstitutionInfoById_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_mGetInstitutionInfoById_result();
    $result->success = $this->handler_->mGetInstitutionInfoById($args->id);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'mGetInstitutionInfoById', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('mGetInstitutionInfoById', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_mGetInstitutionTeacherInfoById($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_mGetInstitutionTeacherInfoById_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_mGetInstitutionTeacherInfoById_result();
    $result->success = $this->handler_->mGetInstitutionTeacherInfoById($args->id);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'mGetInstitutionTeacherInfoById', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('mGetInstitutionTeacherInfoById', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_mGetTeacherInfoById($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_mGetTeacherInfoById_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_mGetTeacherInfoById_result();
    $result->success = $this->handler_->mGetTeacherInfoById($args->id);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'mGetTeacherInfoById', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('mGetTeacherInfoById', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_mGetPublicUserInfo($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_mGetPublicUserInfo_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_mGetPublicUserInfo_result();
    $result->success = $this->handler_->mGetPublicUserInfo($args->userId);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'mGetPublicUserInfo', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('mGetPublicUserInfo', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_mGetNotAllowPromotionList($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_mGetNotAllowPromotionList_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_mGetNotAllowPromotionList_result();
    $result->success = $this->handler_->mGetNotAllowPromotionList();
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'mGetNotAllowPromotionList', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('mGetNotAllowPromotionList', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_mGetItemPropDoListByPids($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_mGetItemPropDoListByPids_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_mGetItemPropDoListByPids_result();
    $result->success = $this->handler_->mGetItemPropDoListByPids($args->pids);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'mGetItemPropDoListByPids', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('mGetItemPropDoListByPids', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_orderEvent($seqid, $input, $output) {
    $args = new \Fasthand\Service\Order\OrderService_orderEvent_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Fasthand\Service\Order\OrderService_orderEvent_result();
    $result->success = $this->handler_->orderEvent($args->fasthand_order, $args->seller_user_id);
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'orderEvent', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('orderEvent', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
}

