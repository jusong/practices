/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CommonService_H
#define CommonService_H

#include <thrift/TDispatchProcessor.h>
#include "common_types.h"



class CommonServiceIf {
 public:
  virtual ~CommonServiceIf() {}
  virtual void commonMethod(std::string& _return, const SData& sdata) = 0;
  virtual void asyncCommonMethod(const SData& sdata) = 0;
};

class CommonServiceIfFactory {
 public:
  typedef CommonServiceIf Handler;

  virtual ~CommonServiceIfFactory() {}

  virtual CommonServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CommonServiceIf* /* handler */) = 0;
};

class CommonServiceIfSingletonFactory : virtual public CommonServiceIfFactory {
 public:
  CommonServiceIfSingletonFactory(const boost::shared_ptr<CommonServiceIf>& iface) : iface_(iface) {}
  virtual ~CommonServiceIfSingletonFactory() {}

  virtual CommonServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CommonServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<CommonServiceIf> iface_;
};

class CommonServiceNull : virtual public CommonServiceIf {
 public:
  virtual ~CommonServiceNull() {}
  void commonMethod(std::string& /* _return */, const SData& /* sdata */) {
    return;
  }
  void asyncCommonMethod(const SData& /* sdata */) {
    return;
  }
};

typedef struct _CommonService_commonMethod_args__isset {
  _CommonService_commonMethod_args__isset() : sdata(false) {}
  bool sdata;
} _CommonService_commonMethod_args__isset;

class CommonService_commonMethod_args {
 public:

  CommonService_commonMethod_args() {
  }

  virtual ~CommonService_commonMethod_args() throw() {}

  SData sdata;

  _CommonService_commonMethod_args__isset __isset;

  void __set_sdata(const SData& val) {
    sdata = val;
  }

  bool operator == (const CommonService_commonMethod_args & rhs) const
  {
    if (!(sdata == rhs.sdata))
      return false;
    return true;
  }
  bool operator != (const CommonService_commonMethod_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonService_commonMethod_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonService_commonMethod_pargs {
 public:


  virtual ~CommonService_commonMethod_pargs() throw() {}

  const SData* sdata;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonService_commonMethod_result__isset {
  _CommonService_commonMethod_result__isset() : success(false) {}
  bool success;
} _CommonService_commonMethod_result__isset;

class CommonService_commonMethod_result {
 public:

  CommonService_commonMethod_result() : success() {
  }

  virtual ~CommonService_commonMethod_result() throw() {}

  std::string success;

  _CommonService_commonMethod_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const CommonService_commonMethod_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonService_commonMethod_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonService_commonMethod_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonService_commonMethod_presult__isset {
  _CommonService_commonMethod_presult__isset() : success(false) {}
  bool success;
} _CommonService_commonMethod_presult__isset;

class CommonService_commonMethod_presult {
 public:


  virtual ~CommonService_commonMethod_presult() throw() {}

  std::string* success;

  _CommonService_commonMethod_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonService_asyncCommonMethod_args__isset {
  _CommonService_asyncCommonMethod_args__isset() : sdata(false) {}
  bool sdata;
} _CommonService_asyncCommonMethod_args__isset;

class CommonService_asyncCommonMethod_args {
 public:

  CommonService_asyncCommonMethod_args() {
  }

  virtual ~CommonService_asyncCommonMethod_args() throw() {}

  SData sdata;

  _CommonService_asyncCommonMethod_args__isset __isset;

  void __set_sdata(const SData& val) {
    sdata = val;
  }

  bool operator == (const CommonService_asyncCommonMethod_args & rhs) const
  {
    if (!(sdata == rhs.sdata))
      return false;
    return true;
  }
  bool operator != (const CommonService_asyncCommonMethod_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonService_asyncCommonMethod_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonService_asyncCommonMethod_pargs {
 public:


  virtual ~CommonService_asyncCommonMethod_pargs() throw() {}

  const SData* sdata;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class CommonServiceClient : virtual public CommonServiceIf {
 public:
  CommonServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  CommonServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void commonMethod(std::string& _return, const SData& sdata);
  void send_commonMethod(const SData& sdata);
  void recv_commonMethod(std::string& _return);
  void asyncCommonMethod(const SData& sdata);
  void send_asyncCommonMethod(const SData& sdata);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CommonServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CommonServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CommonServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_commonMethod(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_asyncCommonMethod(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CommonServiceProcessor(boost::shared_ptr<CommonServiceIf> iface) :
    iface_(iface) {
    processMap_["commonMethod"] = &CommonServiceProcessor::process_commonMethod;
    processMap_["asyncCommonMethod"] = &CommonServiceProcessor::process_asyncCommonMethod;
  }

  virtual ~CommonServiceProcessor() {}
};

class CommonServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CommonServiceProcessorFactory(const ::boost::shared_ptr< CommonServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CommonServiceIfFactory > handlerFactory_;
};

class CommonServiceMultiface : virtual public CommonServiceIf {
 public:
  CommonServiceMultiface(std::vector<boost::shared_ptr<CommonServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CommonServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CommonServiceIf> > ifaces_;
  CommonServiceMultiface() {}
  void add(boost::shared_ptr<CommonServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void commonMethod(std::string& _return, const SData& sdata) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonMethod(_return, sdata);
    }
    ifaces_[i]->commonMethod(_return, sdata);
    return;
  }

  void asyncCommonMethod(const SData& sdata) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->asyncCommonMethod(sdata);
    }
    ifaces_[i]->asyncCommonMethod(sdata);
  }

};



#endif
