/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "common_types.h"

#include <algorithm>



const char* SData::ascii_fingerprint = "F4A50F0EC638C7F66026F9B6678FD89B";
const uint8_t SData::binary_fingerprint[16] = {0xF4,0xA5,0x0F,0x0E,0xC6,0x38,0xC7,0xF6,0x60,0x26,0xF9,0xB6,0x67,0x8F,0xD8,0x9B};

uint32_t SData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->__SERVICENAME);
          this->__isset.__SERVICENAME = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->__METHOD);
          this->__isset.__METHOD = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->__PARAM);
          this->__isset.__PARAM = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SData");

  xfer += oprot->writeFieldBegin("__SERVICENAME", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->__SERVICENAME);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("__METHOD", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->__METHOD);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.__PARAM) {
    xfer += oprot->writeFieldBegin("__PARAM", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->__PARAM);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SData &a, SData &b) {
  using ::std::swap;
  swap(a.__SERVICENAME, b.__SERVICENAME);
  swap(a.__METHOD, b.__METHOD);
  swap(a.__PARAM, b.__PARAM);
  swap(a.__isset, b.__isset);
}


